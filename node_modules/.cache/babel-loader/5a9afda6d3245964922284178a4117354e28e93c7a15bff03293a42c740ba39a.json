{"ast":null,"code":"var _jsxFileName = \"/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/components/AdminChooser.tsx\",\n  _s = $RefreshSig$();\n// Menu to choose which timeline to load (or create new)\n\nimport { useState } from \"react\";\nimport Timeline from \"../classes/Timeline\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminChooser({\n  setID,\n  updateState,\n  updateSet\n}) {\n  _s();\n  let [timelineList, setTimelineList] = useState([]);\n  function loadTimeline(event) {\n    event.preventDefault();\n    let data = new FormData(event.target);\n    let id = data.get(\"select-timeline\");\n    setID(id);\n  }\n  useEffect(() => {\n    async function loadTimelineList(token) {\n      let list = await Timeline.listTimelines(token);\n      if (list) {\n        setTimelineList(list);\n      }\n    }\n    if (authenticated && updateTimelineList) {\n      loadTimelineList(userToken);\n      setUpdateTimelineList(false);\n    } else {\n      setTimelineList([]);\n    }\n  }, [authenticated, updateTimelineList, currentUser, userToken]);\n  function timelineOption(timeline) {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: timeline.id,\n      children: timeline.title\n    }, timeline.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Change display of submit button whether creating or loading\n  let [selection, setSelection] = useState(\"create\");\n  function updateSelection(event) {\n    setSelection(event.target.value);\n  }\n  let loadButtonText = selection === \"create\" ? \"Create\" : \"Load\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"chooser\",\n    onSubmit: loadTimeline,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"select-timeline\",\n      children: \"Select a Timeline:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"select-timeline\",\n      defaultValue: \"create\",\n      onChange: updateSelection,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"create\",\n        children: \"Create New\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), timelines.map(timelineOption)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: loadButtonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminChooser, \"C04bNs8GFpMBuilDjcth9/pjdco=\");\n_c = AdminChooser;\nvar _c;\n$RefreshReg$(_c, \"AdminChooser\");","map":{"version":3,"names":["useState","Timeline","jsxDEV","_jsxDEV","AdminChooser","setID","updateState","updateSet","_s","timelineList","setTimelineList","loadTimeline","event","preventDefault","data","FormData","target","id","get","useEffect","loadTimelineList","token","list","listTimelines","authenticated","updateTimelineList","userToken","setUpdateTimelineList","currentUser","timelineOption","timeline","value","children","title","fileName","_jsxFileName","lineNumber","columnNumber","selection","setSelection","updateSelection","loadButtonText","onSubmit","htmlFor","name","defaultValue","onChange","timelines","map","type","_c","$RefreshReg$"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/components/AdminChooser.tsx"],"sourcesContent":["// Menu to choose which timeline to load (or create new)\n\nimport { useState } from \"react\";\nimport Timeline from \"../classes/Timeline\";\n\ninterface ChooserInput {\n  setID: (id: number) => void,\n  updateState: boolean,\n  updateSet: (b: boolean) => void\n}\n\nexport default function AdminChooser({ \n  setID, updateState, updateSet\n}: ChooserInput): React.ReactElement {\n\n  let [timelineList, setTimelineList] = useState([]);\n\n  function loadTimeline(event: React.FormEvent<HTMLFormElement>): void {\n    event.preventDefault();\n    let data = new FormData(event.target);\n    let id = data.get(\"select-timeline\");\n    setID(id);\n  }\n\n  useEffect(() => {\n    async function loadTimelineList(token: string): void {\n      let list = await Timeline.listTimelines(token);\n      if (list) {\n        setTimelineList(list);\n      }\n    }\n\n    if (authenticated && updateTimelineList) {\n      loadTimelineList(userToken);\n      setUpdateTimelineList(false);\n    } else {\n      setTimelineList([]);\n    }\n  }, [authenticated, updateTimelineList, currentUser, userToken]);\n\n\n\n  function timelineOption(timeline: Timeline): React.ReactElement {\n    return(\n      <option key={timeline.id} value={timeline.id}>{timeline.title}</option>\n    );\n  }\n\n  // Change display of submit button whether creating or loading\n  let [selection, setSelection] = useState(\"create\");\n\n  function updateSelection(event: React.FormEvent<HTMLFormElement>): void {\n    setSelection(event.target.value);\n  }\n\n  let loadButtonText = (selection === \"create\") ? \"Create\" : \"Load\";\n\n  return(\n    <form id=\"chooser\" onSubmit={loadTimeline}>\n      <label htmlFor=\"select-timeline\">Select a Timeline:</label>\n      <select name=\"select-timeline\" \n        defaultValue=\"create\" \n        onChange={updateSelection}>\n        <option value=\"create\">Create New</option>\n        { timelines.map(timelineOption) }\n      </select>\n      <button type=\"submit\">{ loadButtonText }</button>\n    </form>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}