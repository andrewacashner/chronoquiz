{"ast":null,"code":"/**\n * Colors: This class holds the information for one color: red, green, blue\n * values plus a percentage of white to mix in.\n */export default class RgbColorMix{// integer percentage of white to mix in (50 = * 50%)\nconstructor(r,g,b,w){this.red=void 0;// integer 0 <= n < 256\nthis.green=void 0;// integer 0 <= n < 256\nthis.blue=void 0;// integer 0 <= n < 256\nthis.percentWhite=void 0;this.red=r;this.green=g;this.blue=b;this.percentWhite=w;// as decimal, 0.5 not 50%\n}// Create CSS color (color-mix with rgb color)\n// Returns: CSS color-mix expression\nget css(){let rgb=\"rgb(\".concat(this.red,\", \").concat(this.green,\", \").concat(this.blue,\")\");return\"color-mix(in srgb, \".concat(rgb,\", \").concat(this.percentWhite,\"% white)\");}/**\n   * List of all colors available in range.\n   * For each of red, blue, and green, iterate through values of primary with\n   * constant secondary and white values (tertiary color is zero).\n   */static colorSpectrum(){let max=arguments.length>0&&arguments[0]!==undefined?arguments[0]:256;let min=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;let white=arguments.length>2&&arguments[2]!==undefined?arguments[2]:50;let reds=[];let blues=[];let greens=[];// Increase red value relative to others to go red -> orange\nfor(let i=0;i<max;++i){reds.push([max,i,min,white]);}// *Decrease* green and blue value relative to others to continue in\n// spectrum order \nfor(let i=max-1;i>=0;--i){greens.push([i,max,min,white]);blues.push([min,i,max,white]);}// Combine the spectrums and create a color instance for each\nlet perms=[...reds,...greens,...blues];let colors=perms.map(p=>new RgbColorMix(...p));return colors;}static get SPECTRUM(){return RgbColorMix.colorSpectrum();}static get VIOLET(){return RgbColorMix.SPECTRUM.at(-1);}/**\n   * Get the CSS color string for a card at a given index, dividing the\n   * spectrum evenly by the total number of cards\n   * Returns CSS color string\n   */static colorAtIndex(index,// integer index of this card in array\nlength,// integer length of the array\nspectrum){let color;if(length===1){color=violet;}else{let interval=Math.floor(spectrum.length/length);color=spectrum[index*interval];}return color;}}","map":{"version":3,"names":["RgbColorMix","constructor","r","g","b","w","red","green","blue","percentWhite","css","rgb","concat","colorSpectrum","max","arguments","length","undefined","min","white","reds","blues","greens","i","push","perms","colors","map","p","SPECTRUM","VIOLET","at","colorAtIndex","index","spectrum","color","violet","interval","Math","floor"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/classes/RgbColorMix.tsx"],"sourcesContent":["/**\n * Colors: This class holds the information for one color: red, green, blue\n * values plus a percentage of white to mix in.\n */\nexport default class RgbColorMix {\n  red: number;          // integer 0 <= n < 256\n  green: number;        // integer 0 <= n < 256\n  blue: number;         // integer 0 <= n < 256\n  percentWhite: number; // integer percentage of white to mix in (50 = * 50%)\n\n  constructor(r: number, g: number, b: number, w: number) {\n    this.red = r;\n    this.green = g;\n    this.blue = b;\n    this.percentWhite = w; // as decimal, 0.5 not 50%\n  }\n\n  // Create CSS color (color-mix with rgb color)\n  // Returns: CSS color-mix expression\n  get css(): string {\n    let rgb = `rgb(${this.red}, ${this.green}, ${this.blue})`;\n    return `color-mix(in srgb, ${rgb}, ${this.percentWhite}% white)`;\n  }\n\n  /**\n   * List of all colors available in range.\n   * For each of red, blue, and green, iterate through values of primary with\n   * constant secondary and white values (tertiary color is zero).\n   */\n  static colorSpectrum(\n    max: number = 256, // Highest color value possible for each (RGB)\n    min: number = 0,   // Used for secondary color, \n                       //    fixed value mixed in to each primary \n    white: number = 50 // Percent white to mix in, fixed for all \n  ): Array<RgbColorMix> {\n    let reds = [];\n    let blues = [];\n    let greens = []\n\n    // Increase red value relative to others to go red -> orange\n    for (let i = 0; i < max; ++i) {\n      reds.push([max, i, min, white]);\n    }\n\n    // *Decrease* green and blue value relative to others to continue in\n    // spectrum order \n    for (let i = max - 1; i >= 0; --i) {\n      greens.push([i, max, min, white]);\n      blues.push([min, i, max, white]);\n    }\n\n    // Combine the spectrums and create a color instance for each\n    let perms = [...reds, ...greens, ...blues];\n    let colors = perms.map((p) => new RgbColorMix(...p));\n    return colors;\n  }\n\n  static get SPECTRUM() { return RgbColorMix.colorSpectrum(); }\n  static get VIOLET() { return RgbColorMix.SPECTRUM.at(-1); }\n\n  /**\n   * Get the CSS color string for a card at a given index, dividing the\n   * spectrum evenly by the total number of cards\n   * Returns CSS color string\n   */\n  static colorAtIndex(\n    index: number,  // integer index of this card in array\n    length: number, // integer length of the array\n    spectrum: Array<RgbColorMix>\n  ): string {\n    let color;\n    if (length === 1) {\n      color = violet;\n    } else {\n      let interval = Math.floor(spectrum.length / length);\n      color = spectrum[index * interval];\n    }\n    return color;\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}