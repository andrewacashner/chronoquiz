{"ast":null,"code":"var _jsxFileName = \"/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/components/AdminPanel.tsx\",\n  _s2 = $RefreshSig$();\nimport { useState, useContext, useEffect, useReducer } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport debug from \"../lib/debug\";\nimport BackendRequest from \"../classes/BackendRequest\";\nimport Fact from \"../classes/Fact\";\nimport Timeline from \"../classes/Timeline\";\nimport AdminChooser from \"./AdminChooser\";\nimport UploadForm from \"./UploadForm\";\nimport UserContext from \"../store/UserContext\";\nimport AdminContext from \"../store/AdminContext\";\nimport { timelineReducer, defaultTimeline } from \"../reducers/timelineReducer\";\nimport { factReducer, defaultFact } from \"../reducers/factReducer\";\nimport updateReducer from \"../reducers/updateReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AdminPanel() {\n  _s2();\n  var _s = $RefreshSig$();\n  let userContext = useContext(UserContext);\n  let authenticated = userContext.get.authenticated;\n  let currentUser = userContext.get.currentUser;\n  let userToken = userContext.get.userToken;\n\n  // Current timeline on client side\n  let [timelineState, dispatchTimeline] = useReducer(timelineReducer, defaultTimeline);\n\n  // Current new fact card\n  let [factState, dispatchFact] = useReducer(factReducer, defaultFact);\n\n  // Set a single state field from form input\n  const updateTimeline = updateReducer(dispatchTimeline);\n  const updateFact = updateReducer(dispatchFact);\n\n  // Initial timeline loaded\n  let [initialTimeline, setInitialTimeline] = useState(defaultTimeline);\n\n  // Has the user requested to save the timeline (that is, to send client-side\n  // timeline data to the backend database?)\n  let [saveReady, setSaveReady] = useState(false);\n\n  // Used to trigger update of timeline display when \"discard changes\" is\n  // clicked\n  // TODO is there a better way?\n  let [refresh, setRefresh] = useState(true);\n\n  // MONITOR FOR UNSAVED CHANGES\n  // Is the client-side timeline data different from what was originally\n  // received from the backend server? Used to set display of \"save\" and\n  // \"discard changes\" button and to prompt to save unsaved changes when new\n  // timeline is selected\n  let [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n\n  // When a timeline is loaded or changed, record whether there are unsaved\n  // changes (current timeline differs from initial timeline loaded)\n  useEffect(() => {\n    if (initialTimeline) {\n      debug(initialTimeline);\n    }\n    if (timelineState) {\n      debug(timelineState);\n    }\n    let status = timelineState && initialTimeline && !timelineState.equals(initialTimeline);\n    setHasUnsavedChanges(status);\n  }, [timelineState, initialTimeline]);\n\n  // GET LIST OF USER TIMELINES\n\n  // LOAD A TIMELINE FROM BACKEND\n\n  let adminContext = {\n    // 'id' field of Javascript Timeline object on client-side, and of Django\n    // Timeline model on server-side (= primary key)\n    timelineID: useState(null),\n    // Do we need to update the list of user timelines in the select options?\n    updateTimelineList: useState(true)\n  };\n\n  // Trigger: timelineID set when user selects timeline to load or create\n  // Effects: \n  //     - update timelineState, initialTimeline;\n  //     - toggle: \n  //         - updateTimelineList -> true, \n  //         - refresh -> false, \n  //         - hasUnsavedChanges -> false\n  useEffect(() => {\n    async function loadTimeline(user, id, token) {\n      debug(`Loading timeline id ${adminContext.timelineID}`);\n      let newTimeline = await Timeline.newFromBackend(id, token);\n      if (newTimeline) {\n        dispatchTimeline({\n          type: \"set\",\n          payload: newTimeline\n        });\n        setInitialTimeline(newTimeline);\n      }\n    }\n    if (adminContext.timelineID) {\n      if (!hasUnsavedChanges || window.confirm(\"Your quiz has unsaved changes. Do you want to discard the changes and reload the quiz?\")) {\n        if (adminContext.timelineID === \"create\") {\n          dispatchTimeline({\n            type: \"reset\"\n          });\n        } else {\n          loadTimeline(currentUser, adminContext.timelineID, userToken);\n        }\n        setRefresh(false);\n        setHasUnsavedChanges(false);\n      }\n    }\n  }, [adminContext.timelineID, currentUser, userToken, refresh]);\n  function PageInstructions() {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"instructions\",\n      children: \"Your data will not be saved until you click Save.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  }\n  function MetadataPanel() {\n    let creator = timelineState.creator === \"\" ? currentUser.username : timelineState.creator;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"metadata\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Metadata\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"timelinePanel\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formInputBlock\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"title\",\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"title\",\n              onBlur: updateTimeline(\"title\"),\n              defaultValue: timelineState.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"description\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"description\",\n              onBlur: updateTimeline(\"description\"),\n              defaultValue: timelineState.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"keywords\",\n              children: \"Keywords (separated with semicolons)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"keywords\",\n              onBlur: updateTimeline(\"keywords\", Timeline.parseKeywords),\n              defaultValue: timelineState.keywordString\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"creator\",\n              children: \"Creator (for public display; default: your username)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"creator\",\n              onBlur: updateTimeline(\"creator\"),\n              defaultValue: creator\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this);\n  }\n  function CurrentFactsPanel() {\n    function currentFact(item) {\n      function deleteFact(event) {\n        if (window.confirm(\"Are you sure you want to delete the current fact?\")) {\n          debug(`Delete item (date ${item.date.getFullYear()})`);\n          dispatchTimeline({\n            type: \"removeFact\",\n            payload: {\n              fact: item\n            }\n          });\n        }\n      }\n      function editFact(event) {\n        debug(`Edit item (date ${item.date.getFullYear()})`);\n        dispatchFact({\n          type: \"set\",\n          payload: item\n        });\n        dispatchTimeline({\n          type: \"removeFact\",\n          payload: {\n            fact: item\n          }\n        });\n      }\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"FactListControls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: editFact,\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: deleteFact,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: String(item.year)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.info\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.img\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, crypto.randomUUID(), true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this);\n    }\n    function TimelineInstructions() {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"instructions\",\n          children: \"Enter timeline events manually or upload the data using the forms below\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UploadForm, {\n          dispatch: dispatchTimeline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"currentTimeline\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Current Timeline Events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TimelineInstructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"timeline\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Controls\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Image URL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: timelineState.facts.map(currentFact)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this);\n  }\n  function NewFactForm() {\n    function newFact(event) {\n      if (factState.date && factState.info) {\n        dispatchTimeline({\n          type: \"addFact\",\n          payload: {\n            fact: factState\n          }\n        });\n        debug(\"Added fact to timeline\");\n        dispatchFact({\n          type: \"reset\"\n        });\n      }\n    }\n    function CardPreview({\n      fact: Fact\n    }) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        \"data-when\": factState.year,\n        \"data-noselect\": \"noselect\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"date\",\n          children: factState.year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: factState.img,\n          src: factState.img\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"info\",\n          children: factState.info\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"new\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add an Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"addFactForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formInputBlock\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"date\",\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"date\",\n              max: defaultFact.year,\n              onChange: updateFact(\"date\", Fact.dateFromYear),\n              defaultValue: factState.year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"info\",\n              children: \"Description of event\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"info\",\n              onBlur: updateFact(\"info\"),\n              defaultValue: factState.info\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"img\",\n              children: \"Complete URL of image (optional)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"url\",\n              name: \"img\",\n              onBlur: updateFact(\"img\"),\n              defaultValue: factState.img\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          id: \"preview\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardPreview, {\n            fact: factState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          id: \"add\",\n          onClick: newFact,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this);\n  }\n  function activeStyle(isActive) {\n    return isActive ? \"active\" : \"inactive\";\n  }\n  function SaveButton() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: activeStyle(hasUnsavedChanges),\n      id: \"save\",\n      type: \"button\",\n      onClick: saveTimeline,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Send current timeline state to backend to save\n  function saveTimeline(event) {\n    let action = timelineState ? \"Updated\" : \"Created\";\n    debug(`${action} timeline with title '${timelineState.title}'`);\n    setSaveReady(true);\n  }\n  useEffect(() => {\n    async function postTimeline(user, token, timeline) {\n      debug(timeline.facts);\n      debug(timeline.json());\n      let request = new BackendRequest({\n        url: \"timeline-full/\",\n        method: \"POST\",\n        token: token,\n        bodyObject: timeline.json()\n      });\n      let response = await request.fetch();\n      if (response.ok) {\n        let json = await response.json();\n        debug(json);\n      } else {\n        debug(`Problem creating timeline: Server status ${response.status}, ${response.statusText}`);\n      }\n    }\n    if (saveReady) {\n      debug(\"Ready to post timeline\");\n      debug(timelineState);\n      postTimeline(currentUser, userToken, timelineState);\n      setSaveReady(false);\n      adminContext.updateTimelineList[1](true);\n      setHasUnsavedChanges(false);\n    }\n  }, [saveReady, timelineState, currentUser, userToken]);\n  function DeleteTimelineButton() {\n    _s();\n    let [timelineToDelete, setTimelineToDelete] = useState(null);\n    function deleteTimeline() {\n      let msg = \"Are you sure you want to delete this quiz? All of its fact cards will be lost. This action cannot be undone.\";\n      if (window.confirm(msg)) {\n        debug(timelineID);\n        setTimelineToDelete(timelineID);\n      }\n    }\n    useEffect(() => {\n      async function requestDeletion(timelineID, token) {\n        let result = false;\n        let request = new BackendRequest({\n          url: `timelines/${timelineID}/`,\n          method: \"DELETE\",\n          token: token\n        });\n        let response = await request.fetch();\n        if (response.ok) {\n          let json = await response.json();\n          debug(json);\n          setUpdateTimelineList(true);\n          result = true;\n        } else {\n          debug(`Could not delete timeline with id ${timelineID}: Server status ${response.status}, ${response.statusText}`);\n          result = false;\n        }\n        return result;\n      }\n      if (timelineToDelete !== null) {\n        debug(`Deleting timeline with id ${timelineToDelete}`);\n        if (timelineID === \"create\") {\n          dispatchTimeline({\n            type: \"reset\"\n          });\n        } else {\n          let deleted = requestDeletion(timelineToDelete, userToken);\n          if (deleted) {\n            dispatchTimeline({\n              type: \"reset\"\n            });\n            setUpdateTimelineList(true);\n          }\n        }\n        setTimelineToDelete(null);\n      }\n    }, [timelineToDelete]);\n    let msg = adminContext.timelineID === \"create\" ? \"Reset Quiz\" : \"Delete Quiz\";\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"deleteTimeline\",\n      type: \"button\",\n      onClick: deleteTimeline,\n      children: msg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }, this);\n  }\n  _s(DeleteTimelineButton, \"rwotnil7EzBwzm0zKNHwJYsHVHg=\");\n  function DiscardChangesButton() {\n    function discardChanges(event) {\n      setRefresh(true);\n    }\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: activeStyle(hasUnsavedChanges),\n      onClick: discardChanges,\n      children: \"Discard Changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 7\n    }, this);\n  }\n  function Controls() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(SaveButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DiscardChangesButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DeleteTimelineButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }, this);\n  }\n  if (authenticated) {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Manage Your Quizzes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PageInstructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AdminContext.Provider, {\n        value: adminContext,\n        children: [/*#__PURE__*/_jsxDEV(AdminChooser, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetadataPanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CurrentFactsPanel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NewFactForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s2(AdminPanel, \"aaoekDuGF3PrMvdFcP4OYqbk4WM=\");\n_c = AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["useState","useContext","useEffect","useReducer","Navigate","debug","BackendRequest","Fact","Timeline","AdminChooser","UploadForm","UserContext","AdminContext","timelineReducer","defaultTimeline","factReducer","defaultFact","updateReducer","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminPanel","_s2","_s","$RefreshSig$","userContext","authenticated","get","currentUser","userToken","timelineState","dispatchTimeline","factState","dispatchFact","updateTimeline","updateFact","initialTimeline","setInitialTimeline","saveReady","setSaveReady","refresh","setRefresh","hasUnsavedChanges","setHasUnsavedChanges","status","equals","adminContext","timelineID","updateTimelineList","loadTimeline","user","id","token","newTimeline","newFromBackend","type","payload","window","confirm","PageInstructions","className","children","fileName","_jsxFileName","lineNumber","columnNumber","MetadataPanel","creator","username","htmlFor","name","onBlur","defaultValue","title","description","parseKeywords","keywordString","CurrentFactsPanel","currentFact","item","deleteFact","event","date","getFullYear","fact","editFact","onClick","String","year","info","img","crypto","randomUUID","TimelineInstructions","dispatch","facts","map","NewFactForm","newFact","CardPreview","alt","src","max","onChange","dateFromYear","activeStyle","isActive","SaveButton","saveTimeline","action","postTimeline","timeline","json","request","url","method","bodyObject","response","fetch","ok","statusText","DeleteTimelineButton","timelineToDelete","setTimelineToDelete","deleteTimeline","msg","requestDeletion","result","setUpdateTimelineList","deleted","DiscardChangesButton","discardChanges","Controls","Provider","value","to","_c","$RefreshReg$"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/components/AdminPanel.tsx"],"sourcesContent":["import { useState, useContext, useEffect, useReducer } from \"react\";\nimport { Navigate } from \"react-router-dom\";\n\nimport debug from \"../lib/debug\";\n\nimport BackendRequest from \"../classes/BackendRequest\";\nimport User from \"../classes/User\";\nimport Fact from \"../classes/Fact\";\nimport Timeline from \"../classes/Timeline\";\n\nimport AdminChooser from \"./AdminChooser\";\nimport UploadForm from \"./UploadForm\";\n\nimport UserContext from \"../store/UserContext\";\nimport AdminContext from \"../store/AdminContext\";\n\nimport { timelineReducer, defaultTimeline } from \"../reducers/timelineReducer\";\nimport { factReducer, defaultFact } from \"../reducers/factReducer\";\nimport updateReducer from \"../reducers/updateReducer\";\n\nexport default function AdminPanel(): React.ReactElement {\n\n  let userContext = useContext(UserContext);\n  let authenticated = userContext.get.authenticated;\n  let currentUser   = userContext.get.currentUser;\n  let userToken     = userContext.get.userToken;\n\n  // Current timeline on client side\n  let [timelineState, dispatchTimeline] = useReducer(timelineReducer, defaultTimeline);\n\n  // Current new fact card\n  let [factState, dispatchFact] = useReducer(factReducer, defaultFact);\n\n  // Set a single state field from form input\n  const updateTimeline = updateReducer(dispatchTimeline);\n  const updateFact = updateReducer(dispatchFact);\n\n  // Initial timeline loaded\n  let [initialTimeline, setInitialTimeline] = useState(defaultTimeline);\n\n\n  // Has the user requested to save the timeline (that is, to send client-side\n  // timeline data to the backend database?)\n  let [saveReady, setSaveReady] = useState(false);\n\n  // Used to trigger update of timeline display when \"discard changes\" is\n  // clicked\n  // TODO is there a better way?\n  let [refresh, setRefresh] = useState(true);\n\n  // MONITOR FOR UNSAVED CHANGES\n  // Is the client-side timeline data different from what was originally\n  // received from the backend server? Used to set display of \"save\" and\n  // \"discard changes\" button and to prompt to save unsaved changes when new\n  // timeline is selected\n  let [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n\n  // When a timeline is loaded or changed, record whether there are unsaved\n  // changes (current timeline differs from initial timeline loaded)\n  useEffect(() => {\n    if (initialTimeline) { debug(initialTimeline); }\n    if (timelineState) { debug(timelineState); }\n    \n    let status = (timelineState && initialTimeline\n                  && !timelineState.equals(initialTimeline));\n\n    setHasUnsavedChanges(status);\n  }, [timelineState, initialTimeline]);\n\n\n  // GET LIST OF USER TIMELINES\n  \n  \n \n  // LOAD A TIMELINE FROM BACKEND\n\n\n  let adminContext = {\n    // 'id' field of Javascript Timeline object on client-side, and of Django\n    // Timeline model on server-side (= primary key)\n    timelineID: useState(null),\n    \n    // Do we need to update the list of user timelines in the select options?\n    updateTimelineList: useState(true)\n  };\n\n  // Trigger: timelineID set when user selects timeline to load or create\n  // Effects: \n  //     - update timelineState, initialTimeline;\n  //     - toggle: \n  //         - updateTimelineList -> true, \n  //         - refresh -> false, \n  //         - hasUnsavedChanges -> false\n  useEffect(() => {\n    async function loadTimeline(user: User, id: number, token: string): void {\n      debug(`Loading timeline id ${adminContext.timelineID}`);\n\n      let newTimeline = await Timeline.newFromBackend(id, token);\n      if (newTimeline) {\n        dispatchTimeline({ type: \"set\", payload: newTimeline });\n        setInitialTimeline(newTimeline);\n      } \n    }\n\n    if (adminContext.timelineID) {\n      if (!hasUnsavedChanges \n            || window.confirm(\"Your quiz has unsaved changes. Do you want to discard the changes and reload the quiz?\")) {\n\n        if (adminContext.timelineID === \"create\") {\n          dispatchTimeline({ type: \"reset\" });\n        } else {\n          loadTimeline(currentUser, adminContext.timelineID, userToken);\n        }\n        setRefresh(false);\n        setHasUnsavedChanges(false);\n      }\n    }\n  }, [adminContext.timelineID, currentUser, userToken, refresh]);\n\n  function PageInstructions(): React.ReactElement {\n    return(\n      <p className=\"instructions\">Your data will not be saved until you click Save.</p>\n    );\n  }\n\n  function MetadataPanel(): React.ReactElement {\n    let creator = (timelineState.creator === \"\") \n                  ? currentUser.username \n                  : timelineState.creator;\n\n    return(\n      <section id=\"metadata\">\n        <h2>Metadata</h2>\n        <form className=\"timelinePanel\">\n          <div className=\"formInputBlock\">\n            <div className=\"formItem\">\n              <label htmlFor=\"title\">Title</label>\n              <input type=\"text\" name=\"title\" \n                onBlur={updateTimeline(\"title\")}\n                defaultValue={timelineState.title} />\n            </div>\n            <div className=\"formItem\">\n              <label htmlFor=\"description\">Description</label>\n              <input type=\"text\" name=\"description\" \n                onBlur={updateTimeline(\"description\")}\n                defaultValue={timelineState.description} />\n            </div>\n            <div className=\"formItem\">\n              <label htmlFor=\"keywords\">Keywords (separated with semicolons)</label>\n              <input type=\"text\" name=\"keywords\" \n                onBlur={updateTimeline(\"keywords\", Timeline.parseKeywords)}\n                defaultValue={timelineState.keywordString} />\n            </div>\n            <div className=\"formItem\">\n              <label htmlFor=\"creator\">Creator (for public display; default: your username)</label>\n              <input type=\"text\" name=\"creator\" \n                onBlur={updateTimeline(\"creator\")}\n                defaultValue={creator}/>\n            </div>\n          </div>\n        </form>\n      </section>\n    );\n  }\n\n  function CurrentFactsPanel(): React.ReactElement {\n\n    function currentFact(item: Fact): React.ReactElement {\n\n      function deleteFact(event: React.MouseEvent<HTMLInputElement>): void {\n        if (window.confirm(\"Are you sure you want to delete the current fact?\")) {\n          debug(`Delete item (date ${item.date.getFullYear()})`);\n          dispatchTimeline({ \n            type: \"removeFact\",\n            payload: { fact: item }\n          });\n        }\n      }\n\n      function editFact(event: React.MouseEvent<HTMLInputElement>): void {\n        debug(`Edit item (date ${item.date.getFullYear()})`);\n        dispatchFact({\n          type: \"set\",\n          payload: item\n        });\n        dispatchTimeline({ \n          type: \"removeFact\",\n          payload: { fact: item }\n        });\n      }\n\n      return(\n        <tr key={crypto.randomUUID()}>\n          <td>\n            <div className=\"FactListControls\">\n              <button type=\"button\" onClick={editFact}>Edit</button>\n              <button type=\"button\" onClick={deleteFact}>Delete</button>\n            </div>\n          </td>\n          <td>{String(item.year)}</td>\n          <td>{item.info}</td>\n          <td>{item.img}</td>\n        </tr>\n      );\n    }\n\n    function TimelineInstructions(): React.ReactElement {\n      return(\n        <>\n          <p className=\"instructions\">Enter timeline events manually or upload the data using the forms below</p>\n          <UploadForm dispatch={dispatchTimeline} />\n        </>\n      );\n    }\n\n    return(\n      <section id=\"currentTimeline\">\n        <h2>Current Timeline Events</h2>\n        <TimelineInstructions />\n        <table className=\"timeline\">\n          <thead>\n            <tr>\n              <th>Controls</th>\n              <th>Year</th>\n              <th>Description</th>\n              <th>Image URL</th>\n            </tr>\n          </thead>\n          <tbody>\n            { timelineState.facts.map(currentFact) }\n          </tbody>\n        </table>\n      </section>\n    );\n  }\n\n  function NewFactForm(): React.ReactElement {\n\n    function newFact(event: React.FormEvent<HTMLFormElement>) {\n      if (factState.date && factState.info) {\n        dispatchTimeline({\n          type: \"addFact\",\n          payload: { fact: factState }\n        });\n        debug(\"Added fact to timeline\");\n        dispatchFact({ type: \"reset\" });\n      }\n    }\n    \n    function CardPreview({ fact: Fact }): React.ReactElement {\n      return(\n        <div className=\"card\" data-when={factState.year} data-noselect=\"noselect\">\n          <span className=\"date\">{factState.year}</span>\n          <img alt={factState.img} src={factState.img} />\n          <span className=\"info\">{factState.info}</span>\n        </div>\n      );\n    }\n\n    return(\n      <section id=\"new\">\n        <h2>Add an Event</h2>\n        <form id=\"addFactForm\">\n          <div className=\"formInputBlock\">\n            <div className=\"formItem\">\n              <label htmlFor=\"date\">Year</label>\n              <input \n                type=\"number\" \n                name=\"date\" \n                max={defaultFact.year}\n                onChange={updateFact(\"date\", Fact.dateFromYear)}\n                defaultValue={factState.year} />\n            </div>\n            <div className=\"formItem\">\n              <label htmlFor=\"info\">Description of event</label>\n              <input \n                type=\"text\" \n                name=\"info\" \n                onBlur={updateFact(\"info\")}\n                defaultValue={factState.info} />\n            </div>\n            <div className=\"formItem\">\n              <label htmlFor=\"img\">Complete URL of image (optional)</label>\n              <input \n                type=\"url\" \n                name=\"img\" \n                onBlur={updateFact(\"img\")}\n                defaultValue={factState.img} />\n            </div>\n          </div>\n          <section id=\"preview\">\n            <h3>Preview</h3>\n            <CardPreview fact={factState} />\n          </section>\n          <button type=\"button\" id=\"add\" onClick={newFact}>Add</button>\n        </form>\n      </section>\n    );\n  }\n\n  function activeStyle(isActive: boolean): string {\n    return isActive ? \"active\" : \"inactive\";\n  }\n  \n  function SaveButton(): React.ReactElement {\n    return(\n      <button \n        className={activeStyle(hasUnsavedChanges)} \n        id=\"save\" \n        type=\"button\" \n        onClick={saveTimeline}>Save</button>\n    );\n  }\n\n  // Send current timeline state to backend to save\n  function saveTimeline(event: React.FormEvent<HTMLFormElement>): void {\n    let action = timelineState ? \"Updated\" : \"Created\";\n    debug(`${action} timeline with title '${timelineState.title}'`);\n    setSaveReady(true);\n  }\n\n  useEffect(() => {\n    async function postTimeline(\n      user: User, \n      token: string, \n      timeline: Timeline\n    ): void {\n\n      debug(timeline.facts);\n      debug(timeline.json());\n\n      let request = new BackendRequest({\n        url: \"timeline-full/\",\n        method: \"POST\",\n        token: token,\n        bodyObject: timeline.json()\n      });\n\n      let response = await request.fetch();\n\n      if (response.ok) {\n        let json = await response.json();\n        debug(json);\n      } else {\n        debug(`Problem creating timeline: Server status ${response.status}, ${response.statusText}`);\n      }\n    }\n\n    if (saveReady) {\n      debug(\"Ready to post timeline\");\n      debug(timelineState);\n      postTimeline(currentUser, userToken, timelineState);\n      setSaveReady(false);\n      adminContext.updateTimelineList[1](true);\n      setHasUnsavedChanges(false);\n    } \n  }, [saveReady, timelineState, currentUser, userToken]);\n  \n  function DeleteTimelineButton(): React.ReactElement {\n    let [timelineToDelete, setTimelineToDelete] = useState(null);\n\n    function deleteTimeline(): void {\n      let msg = \"Are you sure you want to delete this quiz? All of its fact cards will be lost. This action cannot be undone.\"\n\n      if (window.confirm(msg)) {\n        debug(timelineID);\n        setTimelineToDelete(timelineID);\n      }\n    }\n\n    useEffect(() => {\n      async function requestDeletion(\n        timelineID: number, \n        token: string\n      ): boolean {\n        let result = false;\n        let request = new BackendRequest({\n          url: `timelines/${timelineID}/`,\n          method: \"DELETE\",\n          token: token\n        });\n\n        let response = await request.fetch();\n\n        if (response.ok) {\n          let json = await response.json();\n          debug(json);\n          setUpdateTimelineList(true);\n          result = true;\n        } else {\n          debug(`Could not delete timeline with id ${timelineID}: Server status ${response.status}, ${response.statusText}`);\n          result = false;\n        }\n        return result;\n      }\n\n      if (timelineToDelete !== null) {\n        debug(`Deleting timeline with id ${timelineToDelete}`);\n\n        if (timelineID === \"create\") {\n          dispatchTimeline({ type: \"reset\" });\n        } else {\n          let deleted = requestDeletion(timelineToDelete, userToken);\n          if (deleted) {\n            dispatchTimeline({ type: \"reset\" });\n            setUpdateTimelineList(true);\n          }\n        }\n\n        setTimelineToDelete(null);\n      }\n    }, [timelineToDelete]);\n\n    let msg = (adminContext.timelineID === \"create\") \n              ? \"Reset Quiz\" : \"Delete Quiz\";\n\n    return(\n      <button id=\"deleteTimeline\" type=\"button\" onClick={deleteTimeline}>{ msg }</button>\n    );\n  }\n\n  function DiscardChangesButton(): React.ReactElement {\n    function discardChanges(event: React.MouseEvent<HTMLInputElement>): void {\n      setRefresh(true);\n    }\n\n    return(\n      <button \n        type=\"button\" \n        className={activeStyle(hasUnsavedChanges)} onClick={discardChanges}>Discard Changes</button>\n    );\n  }\n\n  function Controls(): React.ReactElement {\n    return(\n      <div className=\"controls\">\n        <SaveButton />\n        <DiscardChangesButton />\n        <DeleteTimelineButton />\n      </div>\n    );\n  }\n\n  if (authenticated) {\n    return(\n      <main>\n        <h1>Manage Your Quizzes</h1>\n        <PageInstructions />\n        <AdminContext.Provider value={ adminContext }>\n          <AdminChooser />\n          <MetadataPanel />\n          <CurrentFactsPanel />\n          <NewFactForm />\n          <Controls />\n        </AdminContext.Provider>\n      </main>\n    );\n  } else {\n    return(\n      <Navigate to=\"/login\" />\n      );\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}