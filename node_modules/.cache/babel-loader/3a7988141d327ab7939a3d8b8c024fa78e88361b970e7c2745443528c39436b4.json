{"ast":null,"code":"var _jsxFileName = \"/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/components/Timeline.tsx\",\n  _s = $RefreshSig$();\nimport { useContext } from \"react\";\nimport TimelineContext from \"../store/TimelineContext\";\nimport Game from \"../classes/Game\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction isCardElement(el) {\n  return el.classList.contains(\"card\");\n}\n\n// Return a card element, if found at given coordinates; or null. \nfunction cardAtCoord(x, y) {\n  let el = document.elementFromPoint(x, y);\n  console.log(el);\n  return isCardElement(el) ? el : null;\n}\n\n// Get the center point between two coordinates.\nfunction midpoint(a,\n// smaller (left edge)\nb) {\n  return (b - a) / 2 + a;\n}\n\n// TODO redo without queryselector?\n\n/**\n * Given an event (from a drop), start from its coordinates and search\n * to the right until a card element is found. The card must be dropped to\n * left of the midpoint of the card.\n * Return the answer card or null.\n */\nfunction findFirstCardToRight(event) {\n  console.log(`Card dropped with pointer at (${event.clientX}, ${event.clientY})`);\n\n  // Search along the timeline bar regardless of where the drop was vertically\n  let timelineBar = document.querySelector(\"div.scrollingTimeline hr\");\n  let y = timelineBar.getBoundingClientRect().top;\n  console.log(\"Looking for nearest card to timeline drop point\");\n  let max = document.documentElement.clientWidth;\n  let card = null;\n  for (let x = event.clientX; x < max; ++x) {\n    card = cardAtCoord(x, y);\n    if (card) {\n      let bounds = card.getBoundingClientRect();\n      let center = midpoint(bounds.left, bounds.right);\n      if (x <= center) break;\n    }\n  }\n  return card;\n}\nexport default function Clues() {\n  _s();\n  let context = useContext(TimelineContext);\n  let [game, setGame] = [context.get, context.set];\n  let timeline = game.timeline;\n\n  // Allow to move by dragging. Insert gap to the left of a card when the drag\n  // point is in range to guess this card.\n  function dragoverHandler(event) {\n    event.preventDefault();\n    let bounds = event.target.getBoundingClientRect();\n    let center = midpoint(bounds.left, bounds.right);\n    if (event.clientX <= center) {\n      console.log(\"In range\");\n      let cardUnderDrag = cardAtCoord(event.clientX, event.clientY);\n      if (cardUnderDrag) {\n        let match = timeline.items.find(c => c.id === cardUnderDrag.id);\n        match.expand = true;\n        setGame(prevGame => new Game({\n          timeline: timeline,\n          ...prevGame\n        }));\n      }\n    }\n    event.dataTransfer.effectAllowed = \"move\";\n  }\n  function dragleaveHandler(event) {\n    let el = event.target;\n    if (isCardElement(el)) {\n      let match = timeline.items.find(c => c.id === el.id);\n      match.expand = false;\n      setGame(prevGame => new Game({\n        timeline: timeline,\n        ...prevGame\n      }));\n    }\n  }\n\n  /**\n   * When the user drops a card onto a timeline card, find the closest card,\n   * test if the date on the clue is between that card and its previous\n   * neighbor (if there is one); if so insert the card and increment the\n   * score; if not, do not insert the card and decrement the score.\n   */\n  function dropHandler(event) {\n    // Is the given clue between a given answer card and the one before it?\n    function isClueBetweenDates(clue,\n    // Dropped card\n    guess,\n    // Card that clue was dropped onto\n    preGuess) {\n      let clueDate = clue.dataset.when;\n      let guessDate = guess.dataset.when;\n      let isBeforeGuess = clueDate <= guessDate;\n      let noPreGuess = !preGuess;\n      let isAfterPreGuess = preGuess && clueDate >= preGuess.dataset.when;\n      let isAfterAnyPreGuess = noPreGuess || isAfterPreGuess;\n      return isBeforeGuess && isAfterAnyPreGuess;\n    }\n    event.preventDefault();\n\n    // Find nearest answer (first card found to right of click) to compare\n    let clues = game.clues;\n    let clue = clues.last();\n    let guessID = findFirstCardToRight(event);\n    let guessIndex = timeline.items.findIndex(c => c.id === guessID);\n    if (guessID && guessIndex > 0) {\n      let guess = timeline[guessIndex];\n      let beforeGuess = timeline[guessIndex - 1];\n      if (isClueBetweenDates(clue, guess, beforeGuess)) {\n        console.log(\"Correct: ++Score\");\n        setGame(prevGame => prevGame.copyWithNextClue().incrementScore());\n      } else {\n        console.log(\"Incorrect, --Score\");\n        clue.flash();\n        setGame(prevGame => new Game({\n          clues: clues,\n          ...prevGame\n        }));\n        setGame(prevGame => prevGame.decrementScore());\n      }\n    } else {\n      console.log(\"No card found at drop location\");\n    }\n  }\n  let dragDropInterface = {\n    onDrop: dropHandler,\n    onDragOver: dragoverHandler,\n    onDragLeave: dragleaveHandler\n  };\n  if (game.isActive && timeline && !(timeline !== null && timeline !== void 0 && timeline.isEmpty())) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scrollingTimeline\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timeline\",\n        ...dragDropInterface,\n        children: timeline.items.map(card => /*#__PURE__*/_jsxDEV(Card, {\n          children: card\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 39\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(Clues, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n_c = Clues;\nvar _c;\n$RefreshReg$(_c, \"Clues\");","map":{"version":3,"names":["useContext","TimelineContext","Game","Card","jsxDEV","_jsxDEV","isCardElement","el","classList","contains","cardAtCoord","x","y","document","elementFromPoint","console","log","midpoint","a","b","findFirstCardToRight","event","clientX","clientY","timelineBar","querySelector","getBoundingClientRect","top","max","documentElement","clientWidth","card","bounds","center","left","right","Clues","_s","context","game","setGame","get","set","timeline","dragoverHandler","preventDefault","target","cardUnderDrag","match","items","find","c","id","expand","prevGame","dataTransfer","effectAllowed","dragleaveHandler","dropHandler","isClueBetweenDates","clue","guess","preGuess","clueDate","dataset","when","guessDate","isBeforeGuess","noPreGuess","isAfterPreGuess","isAfterAnyPreGuess","clues","last","guessID","guessIndex","findIndex","beforeGuess","copyWithNextClue","incrementScore","flash","decrementScore","dragDropInterface","onDrop","onDragOver","onDragLeave","isActive","isEmpty","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/components/Timeline.tsx"],"sourcesContent":["import { useContext } from \"react\";\nimport TimelineContext from \"../store/TimelineContext\";\n\nimport Game from \"../classes/Game\";\n\nimport Card from \"./Card\";\n\nfunction isCardElement(el: HTMLElement): boolean {\n  return el.classList.contains(\"card\");\n}\n\n// Return a card element, if found at given coordinates; or null. \nfunction cardAtCoord(x: number, y: number): HTMLElement {\n  let el = document.elementFromPoint(x, y);\n  console.log(el);\n  return isCardElement(el) ? el : null;\n}\n\n// Get the center point between two coordinates.\nfunction midpoint(\n  a: number, // smaller (left edge)\n  b: number  // larger (right edge)\n): number {\n  return (b - a) / 2 + a;\n}\n \n\n// TODO redo without queryselector?\n\n/**\n * Given an event (from a drop), start from its coordinates and search\n * to the right until a card element is found. The card must be dropped to\n * left of the midpoint of the card.\n * Return the answer card or null.\n */\nfunction findFirstCardToRight(event: React.DropEvent<HTMLElement>): HTMLElement {\n  console.log(`Card dropped with pointer at (${event.clientX}, ${event.clientY})`);\n\n  // Search along the timeline bar regardless of where the drop was vertically\n  let timelineBar = document.querySelector(\"div.scrollingTimeline hr\");\n  let y = timelineBar.getBoundingClientRect().top;\n\n  console.log(\"Looking for nearest card to timeline drop point\");\n  let max = document.documentElement.clientWidth; \n\n  let card = null;\n  for (let x = event.clientX; x < max; ++x) {\n    card = cardAtCoord(x, y);\n    if (card) {\n      let bounds = card.getBoundingClientRect();\n      let center = midpoint(bounds.left, bounds.right);\n      if (x <= center) break;\n    }\n  }\n\n  return card;\n}\n\n\n\nexport default function Clues() {\n  let context = useContext(TimelineContext);\n  let [game, setGame] = [context.get, context.set];\n  let timeline = game.timeline;\n\n  // Allow to move by dragging. Insert gap to the left of a card when the drag\n  // point is in range to guess this card.\n  function dragoverHandler(event: React.DragEvent<HTMLElement>): void {\n    event.preventDefault();\n  \n    let bounds = event.target.getBoundingClientRect();\n    let center = midpoint(bounds.left, bounds.right);\n  \n    if (event.clientX <= center) {\n      console.log(\"In range\");\n      let cardUnderDrag = cardAtCoord(event.clientX, event.clientY);\n      if (cardUnderDrag) {\n        let match = timeline.items.find(c => c.id === cardUnderDrag.id);\n        match.expand = true;\n        setGame(prevGame => new Game({ timeline: timeline, ...prevGame }));\n      }\n    }\n    event.dataTransfer.effectAllowed = \"move\";\n  }\n  \n  function dragleaveHandler(event: React.DragEvent<HTMLElement>): void {\n    let el = event.target;\n    if (isCardElement(el)) {\n      let match = timeline.items.find(c => c.id === el.id);\n      match.expand = false;\n      setGame(prevGame => new Game({ timeline: timeline, ...prevGame }));\n    }\n  }\n\n  /**\n   * When the user drops a card onto a timeline card, find the closest card,\n   * test if the date on the clue is between that card and its previous\n   * neighbor (if there is one); if so insert the card and increment the\n   * score; if not, do not insert the card and decrement the score.\n   */\n  function dropHandler(event: React.DropEvent<HTMLElement>): void {\n    \n    // Is the given clue between a given answer card and the one before it?\n    function isClueBetweenDates(\n      clue: HTMLElement,            // Dropped card\n      guess: HTMLElement,           // Card that clue was dropped onto\n      preGuess: HTMLElement | null  // previousSibling of guess, if exists\n    ): boolean {\n      let clueDate = clue.dataset.when;\n      let guessDate = guess.dataset.when;\n      let isBeforeGuess = clueDate <= guessDate;\n    \n      let noPreGuess = !preGuess;\n      let isAfterPreGuess = preGuess && (clueDate >= preGuess.dataset.when);\n      let isAfterAnyPreGuess = noPreGuess || isAfterPreGuess;\n    \n      return isBeforeGuess && isAfterAnyPreGuess;\n    }\n\n    event.preventDefault();\n\n    // Find nearest answer (first card found to right of click) to compare\n    let clues = game.clues;\n    let clue = clues.last();\n    let guessID = findFirstCardToRight(event);\n    let guessIndex = timeline.items.findIndex(c => c.id === guessID);\n\n    if (guessID && guessIndex > 0) {\n      let guess = timeline[guessIndex];\n      let beforeGuess = timeline[guessIndex - 1];\n\n      if (isClueBetweenDates(clue, guess, beforeGuess)) {\n        console.log(\"Correct: ++Score\");\n        setGame(prevGame => prevGame.copyWithNextClue().incrementScore());\n      } else {\n        console.log(\"Incorrect, --Score\");\n        clue.flash();\n        setGame(prevGame => new Game({ clues: clues, ...prevGame }));\n        setGame(prevGame => prevGame.decrementScore());\n      }\n    } else {\n      console.log(\"No card found at drop location\");\n    }\n  }\n\n  let dragDropInterface = {\n    onDrop: dropHandler,\n    onDragOver: dragoverHandler,\n    onDragLeave: dragleaveHandler\n  } \n\n  if (game.isActive && timeline && !timeline?.isEmpty()) {\n    return(\n      <div className=\"scrollingTimeline\">\n        <hr />\n        <div className=\"timeline\" {...dragDropInterface}>\n          {timeline.items.map(card => <Card key={card.id}>{card}</Card>)}\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}