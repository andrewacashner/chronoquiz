{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nvar _Card;\nvar _safe = /*#__PURE__*/_classPrivateFieldLooseKey(\"safe\");\nvar _markSafe = /*#__PURE__*/_classPrivateFieldLooseKey(\"markSafe\");\nvar _addHtmlDate = /*#__PURE__*/_classPrivateFieldLooseKey(\"addHtmlDate\");\nvar _addHtmlImg = /*#__PURE__*/_classPrivateFieldLooseKey(\"addHtmlImg\");\nvar _addHtmlInfo = /*#__PURE__*/_classPrivateFieldLooseKey(\"addHtmlInfo\");\nvar _dateToString = /*#__PURE__*/_classPrivateFieldLooseKey(\"dateToString\");\nvar _makeDraggable = /*#__PURE__*/_classPrivateFieldLooseKey(\"makeDraggable\");\nvar _dragstartHandler = /*#__PURE__*/_classPrivateFieldLooseKey(\"dragstartHandler\");\nexport default class Card {\n  // Each card gets the given info and a random unique identifier.\n  constructor({\n    isClue = true,\n    date,\n    info,\n    img,\n    color\n  }) {\n    /**\n     * Procedure: When a card is dragged, transfer its id and allow it to be\n     * moved.\n     * @param {event} event\n     */\n    Object.defineProperty(this, _dragstartHandler, {\n      value: _dragstartHandler2\n    });\n    /** \n     * Procedure: Set card node as a draggable object, not a drop target.\n     * @param {element} el - a Card DOM Element (div.card)\n     */\n    Object.defineProperty(this, _makeDraggable, {\n      value: _makeDraggable2\n    });\n    /**\n     * Return the year if positive or year BC if negative. (Deals with the year\n     * only.) \n     *\n     * Technically BC should be offset by one year but we told users to use\n     * negative numbers as years BC.\n     *\n     * @returns {string} - Formatted string for year, with BC if the year was\n     * negative\n     */\n    Object.defineProperty(this, _dateToString, {\n      value: _dateToString2\n    });\n    Object.defineProperty(this, _addHtmlInfo, {\n      value: _addHtmlInfo2\n    });\n    Object.defineProperty(this, _addHtmlImg, {\n      value: _addHtmlImg2\n    });\n    /**\n     * Procedure: Add the element to display the date to the HTML card we are\n     * making. In the date field, just show \"Clue\" if this is a clue.\n     * @param {element} cardNode -- HTML DOM object for a div.card\n     */\n    Object.defineProperty(this, _addHtmlDate, {\n      value: _addHtmlDate2\n    });\n    Object.defineProperty(this, _markSafe, {\n      value: _markSafe2\n    });\n    this.isClue = void 0;\n    this.id = void 0;\n    this.date = void 0;\n    this.info = void 0;\n    this.img = void 0;\n    this.color = void 0;\n    Object.defineProperty(this, _safe, {\n      writable: true,\n      value: void 0\n    });\n    this.isClue = isClue;\n    this.id = crypto.randomUUID();\n    this.date = date;\n    this.info = info;\n    this.img = img;\n    this.color = color;\n    _classPrivateFieldLooseBase(this, _safe)[_safe] = false; // Has this card been sanitized?\n  }\n  get isSafe() {\n    return _classPrivateFieldLooseBase(this, _safe)[_safe];\n  }\n  // PUBLIC METHODS\n\n  /** Return the date as YYYY year string.\n   * @returns {string}\n   */\n  get year() {\n    return this.date.getFullYear();\n  }\n  set year(YYYY) {\n    if (YYYY) {\n      this.date.setFullYear(YYYY);\n    }\n  }\n\n  /**\n   * Create HTML div.card node\n   * @returns {element} - div.card DOM element\n   */\n  toHtml() {\n    let card = document.createElement(\"div\");\n    card.className = \"card\";\n    card.id = this.id;\n    card.setAttribute(\"data-when\", this.year);\n\n    // CSS will use this to make it impossible to select card contents\n    // accidentally\n    card.setAttribute(\"data-noselect\", \"noselect\");\n    _classPrivateFieldLooseBase(this, _addHtmlDate)[_addHtmlDate](card);\n    _classPrivateFieldLooseBase(this, _addHtmlImg)[_addHtmlImg](card);\n    _classPrivateFieldLooseBase(this, _addHtmlInfo)[_addHtmlInfo](card);\n    if (this.isClue) {\n      _classPrivateFieldLooseBase(this, _makeDraggable)[_makeDraggable](card);\n    } else {\n      Color.setCssColor(card, this.color);\n    }\n    return card;\n  }\n}\n_Card = Card;\nfunction _markSafe2() {\n  _classPrivateFieldLooseBase(this, _safe)[_safe] = true;\n  return this;\n}\nfunction _addHtmlDate2(cardNode) {\n  let dateNode = document.createElement(\"span\");\n  dateNode.className = \"date\";\n  dateNode.textContent = _classPrivateFieldLooseBase(this, _dateToString)[_dateToString]();\n  cardNode.appendChild(dateNode);\n}\nfunction _addHtmlImg2(cardNode) {\n  if (this.img) {\n    let imgNode = new Image();\n    imgNode.src = this.img;\n    cardNode.appendChild(imgNode);\n  }\n}\nfunction _addHtmlInfo2(cardNode) {\n  let infoNode = document.createElement(\"span\");\n  infoNode.className = \"info\";\n  infoNode.textContent = this.info;\n  cardNode.appendChild(infoNode);\n}\nfunction _dateToString2() {\n  if (this.isClue) {\n    return \"Clue\";\n  } else {\n    let yearZero = new Date();\n    yearZero.setFullYear(0);\n    let displayYear = this.year;\n    if (this.date < yearZero) {\n      displayYear = `${-displayYear} bce`;\n    }\n    return displayYear;\n  }\n}\nfunction _makeDraggable2(el) {\n  el.setAttribute(\"draggable\", \"true\");\n  el.addEventListener(\"dragstart\", _classPrivateFieldLooseBase(this, _dragstartHandler)[_dragstartHandler]);\n}\nfunction _dragstartHandler2(event) {\n  event.dataTransfer.setData(\"id\", event.target.id);\n  event.dataTransfer.effectAllowed = \"move\";\n}","map":{"version":3,"names":["Card","constructor","isClue","date","info","img","color","Object","defineProperty","_dragstartHandler","value","_dragstartHandler2","_makeDraggable","_makeDraggable2","_dateToString","_dateToString2","_addHtmlInfo","_addHtmlInfo2","_addHtmlImg","_addHtmlImg2","_addHtmlDate","_addHtmlDate2","_markSafe","_markSafe2","id","_safe","writable","crypto","randomUUID","_classPrivateFieldLooseBase","isSafe","year","getFullYear","YYYY","setFullYear","toHtml","card","document","createElement","className","setAttribute","Color","setCssColor","_Card","cardNode","dateNode","textContent","appendChild","imgNode","Image","src","infoNode","yearZero","Date","displayYear","el","addEventListener","event","dataTransfer","setData","target","effectAllowed"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/classes/Card.tsx"],"sourcesContent":["export default class Card {\n  isClue: boolean;\n  id: string;\n  date: Date;\n  info: string;\n  img: string;\n  color: string;\n  #safe: boolean;\n\n  // Each card gets the given info and a random unique identifier.\n  constructor({ isClue = true, date, info, img, color }: {\n    isClue?: boolean, // Is this a clue (true) or answer?\n    date?: number,    // Four-digit year of event\n    info?: string,    // Brief description of event\n    img?: string,     // Full URL of image\n    color?: string    // CSS color to be used in timeline\n  }) {\n    this.isClue = isClue;\n    this.id = crypto.randomUUID();\n    this.date = date;\n    this.info = info;\n    this.img = img;\n    this.color = color;\n    this.#safe = false; // Has this card been sanitized?\n  }\n\n  #markSafe(): Card {\n    this.#safe = true;\n    return this;\n  }\n\n  get isSafe(): boolean {\n    return this.#safe;\n  }\n\n  /**\n   * Procedure: Add the element to display the date to the HTML card we are\n   * making. In the date field, just show \"Clue\" if this is a clue.\n   * @param {element} cardNode -- HTML DOM object for a div.card\n   */\n  #addHtmlDate(cardNode: HTMLElement): HTMLElement {\n    let dateNode = document.createElement(\"span\");\n    dateNode.className = \"date\";\n    dateNode.textContent = this.#dateToString();\n    cardNode.appendChild(dateNode);\n  }\n\n  #addHtmlImg(cardNode) {\n    if (this.img) {\n      let imgNode = new Image();\n      imgNode.src = this.img;\n      cardNode.appendChild(imgNode);\n    }\n  }\n\n  #addHtmlInfo(cardNode) {\n    let infoNode = document.createElement(\"span\");\n    infoNode.className = \"info\";\n    infoNode.textContent = this.info;\n    cardNode.appendChild(infoNode);\n  }\n\n  /**\n   * Return the year if positive or year BC if negative. (Deals with the year\n   * only.) \n   *\n   * Technically BC should be offset by one year but we told users to use\n   * negative numbers as years BC.\n   *\n   * @returns {string} - Formatted string for year, with BC if the year was\n   * negative\n   */\n  #dateToString() { \n    if (this.isClue) {\n      return \"Clue\";\n    } else {\n      let yearZero = new Date();\n      yearZero.setFullYear(0);\n\n      let displayYear = this.year;\n      if (this.date < yearZero) {\n        displayYear = `${-displayYear} bce`; \n      } \n      return displayYear;\n    }\n  }\n  \n  /** \n   * Procedure: Set card node as a draggable object, not a drop target.\n   * @param {element} el - a Card DOM Element (div.card)\n   */\n  #makeDraggable(el) {\n    el.setAttribute(\"draggable\", \"true\");\n    el.addEventListener(\"dragstart\", this.#dragstartHandler);\n  }\n  \n  /**\n   * Procedure: When a card is dragged, transfer its id and allow it to be\n   * moved.\n   * @param {event} event\n   */\n  #dragstartHandler(event) {\n    event.dataTransfer.setData(\"id\", event.target.id);\n    event.dataTransfer.effectAllowed = \"move\";\n  }\n  // PUBLIC METHODS\n\n  /** Return the date as YYYY year string.\n   * @returns {string}\n   */\n  get year() { return this.date.getFullYear(); }\n \n  set year(YYYY) { \n    if (YYYY) {\n      this.date.setFullYear(YYYY); \n    } \n  }\n\n  /**\n   * Create HTML div.card node\n   * @returns {element} - div.card DOM element\n   */\n  toHtml() {\n    let card = document.createElement(\"div\");\n    card.className = \"card\";\n    card.id = this.id;\n    card.setAttribute(\"data-when\", this.year);\n\n    // CSS will use this to make it impossible to select card contents\n    // accidentally\n    card.setAttribute(\"data-noselect\", \"noselect\");\n\n    this.#addHtmlDate(card);\n    this.#addHtmlImg(card);\n    this.#addHtmlInfo(card)\n\n    if (this.isClue) {\n      this.#makeDraggable(card);\n    } else {\n      Color.setCssColor(card, this.color);\n    }\n\n    return card;\n  }\n\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}