{"ast":null,"code":"import Card from \"./Card\";\nimport FactList from \"./FactList\";\nimport { default as Color } from \"./RgbColorMix\";\nexport default class Game {\n  constructor({\n    clues,\n    timeline,\n    score = 0,\n    isActive = false,\n    isGameOver = false\n  }) {\n    this.clues = void 0;\n    this.timeline = void 0;\n    this.score = void 0;\n    this.isActive = void 0;\n    this.isGameOver = void 0;\n    this.clues = clues;\n    this.timeline = timeline;\n    this.score = score;\n    this.isActive = isActive;\n    this.isGameOver = isGameOver;\n  }\n\n  /** Remove last item of clue list and add it to timeline list.\n   * (Note: The timeline list will then shuffle itself in chronological\n   * order.)\n   */\n  moveCurrentClueToTimeline() {\n    let answer = this.clues.pop();\n    answer.isClue = false;\n    this.timeline.addFact(answer);\n    return this;\n  }\n  resetTimelineMargins() {\n    this.timeline.resetMargins();\n    return this;\n  }\n  setClues(clues) {\n    this.clues = new FactList(...clues);\n    return this;\n  }\n  setTimeline(timeline) {\n    this.timeline = new FactList(...timeline);\n    return this;\n  }\n\n  // Start the game with just a \"Now\" card in the timeline.\n  incrementScore() {\n    ++this.score;\n    return this;\n  }\n\n  // Subtract one from score; don't go below zero\n  decrementScore() {\n    this.score = Math.max(0, this.score - 1);\n    return this;\n  }\n  activate() {\n    this.isActive = true;\n    return this;\n  }\n\n  // Since we have the image locally we don't need to sanitize the card.\n  static startingGame() {\n    let NowCard = new Card({\n      isClue: false,\n      date: new Date(),\n      info: \"Now\",\n      img: \"./img/hourglass.jpg\",\n      color: Color.VIOLET\n    });\n    NowCard.markSafe();\n    return new Game({\n      clues: new FactList(),\n      timeline: new FactList(NowCard),\n      score: 0\n    });\n  }\n}","map":{"version":3,"names":["Card","FactList","default","Color","Game","constructor","clues","timeline","score","isActive","isGameOver","moveCurrentClueToTimeline","answer","pop","isClue","addFact","resetTimelineMargins","resetMargins","setClues","setTimeline","incrementScore","decrementScore","Math","max","activate","startingGame","NowCard","date","Date","info","img","color","VIOLET","markSafe"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/classes/Game.tsx"],"sourcesContent":["import Card from \"./Card\";\nimport FactList from \"./FactList\";\nimport { default as Color } from \"./RgbColorMix\";\n\ninterface GameInput {\n  clues: FactList;\n  timeline: FactList;\n  score: number;\n}\n\nexport default class Game {\n  clues: FactList;\n  timeline: FactList;\n  score: number;\n  isActive: boolean;\n  isGameOver: boolean;\n\n  constructor({ \n    clues, \n    timeline, \n    score = 0, \n    isActive = false, \n    isGameOver = false \n  }: GameInput) {\n\n    this.clues = clues;\n    this.timeline = timeline;\n    this.score = score;\n    this.isActive = isActive;\n    this.isGameOver = isGameOver;\n  }\n\n  /** Remove last item of clue list and add it to timeline list.\n   * (Note: The timeline list will then shuffle itself in chronological\n   * order.)\n   */\n  moveCurrentClueToTimeline(): Game {\n    let answer = this.clues.pop();\n    answer.isClue = false;\n    this.timeline.addFact(answer);\n    return this;\n  }\n\n  resetTimelineMargins(): Game {\n    this.timeline.resetMargins();\n    return this;\n  }\n\n  setClues(clues: FactList): Game {\n    this.clues = new FactList(...clues);\n    return this;\n  }\n\n  setTimeline(timeline: FactList): Game {\n    this.timeline = new FactList(...timeline);\n    return this;\n  }\n\n  // Start the game with just a \"Now\" card in the timeline.\n  incrementScore(): Game {\n    ++this.score;\n    return this;\n  }\n\n  // Subtract one from score; don't go below zero\n  decrementScore(): Game {\n    this.score  = Math.max(0, this.score - 1);\n    return this;\n  }\n\n  activate(): Game {\n    this.isActive = true;\n    return this;\n  }\n\n  // Since we have the image locally we don't need to sanitize the card.\n  static startingGame(): Game {\n    let NowCard = new Card({\n      isClue: false, \n      date: new Date(),\n      info: \"Now\", \n      img: \"./img/hourglass.jpg\",\n      color: Color.VIOLET\n    });\n    NowCard.markSafe();\n\n    return new Game({\n      clues: new FactList(), \n      timeline: new FactList(NowCard),\n      score: 0\n    });\n  }\n\n\n}\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,OAAO,IAAIC,KAAK,QAAQ,eAAe;AAQhD,eAAe,MAAMC,IAAI,CAAC;EAOxBC,WAAWA,CAAC;IACVC,KAAK;IACLC,QAAQ;IACRC,KAAK,GAAG,CAAC;IACTC,QAAQ,GAAG,KAAK;IAChBC,UAAU,GAAG;EACJ,CAAC,EAAE;IAAA,KAZdJ,KAAK;IAAA,KACLC,QAAQ;IAAA,KACRC,KAAK;IAAA,KACLC,QAAQ;IAAA,KACRC,UAAU;IAUR,IAAI,CAACJ,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;;EAEA;AACF;AACA;AACA;EACEC,yBAAyBA,CAAA,EAAS;IAChC,IAAIC,MAAM,GAAG,IAAI,CAACN,KAAK,CAACO,GAAG,CAAC,CAAC;IAC7BD,MAAM,CAACE,MAAM,GAAG,KAAK;IACrB,IAAI,CAACP,QAAQ,CAACQ,OAAO,CAACH,MAAM,CAAC;IAC7B,OAAO,IAAI;EACb;EAEAI,oBAAoBA,CAAA,EAAS;IAC3B,IAAI,CAACT,QAAQ,CAACU,YAAY,CAAC,CAAC;IAC5B,OAAO,IAAI;EACb;EAEAC,QAAQA,CAACZ,KAAe,EAAQ;IAC9B,IAAI,CAACA,KAAK,GAAG,IAAIL,QAAQ,CAAC,GAAGK,KAAK,CAAC;IACnC,OAAO,IAAI;EACb;EAEAa,WAAWA,CAACZ,QAAkB,EAAQ;IACpC,IAAI,CAACA,QAAQ,GAAG,IAAIN,QAAQ,CAAC,GAAGM,QAAQ,CAAC;IACzC,OAAO,IAAI;EACb;;EAEA;EACAa,cAAcA,CAAA,EAAS;IACrB,EAAE,IAAI,CAACZ,KAAK;IACZ,OAAO,IAAI;EACb;;EAEA;EACAa,cAAcA,CAAA,EAAS;IACrB,IAAI,CAACb,KAAK,GAAIc,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACf,KAAK,GAAG,CAAC,CAAC;IACzC,OAAO,IAAI;EACb;EAEAgB,QAAQA,CAAA,EAAS;IACf,IAAI,CAACf,QAAQ,GAAG,IAAI;IACpB,OAAO,IAAI;EACb;;EAEA;EACA,OAAOgB,YAAYA,CAAA,EAAS;IAC1B,IAAIC,OAAO,GAAG,IAAI1B,IAAI,CAAC;MACrBc,MAAM,EAAE,KAAK;MACba,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC;MAChBC,IAAI,EAAE,KAAK;MACXC,GAAG,EAAE,qBAAqB;MAC1BC,KAAK,EAAE5B,KAAK,CAAC6B;IACf,CAAC,CAAC;IACFN,OAAO,CAACO,QAAQ,CAAC,CAAC;IAElB,OAAO,IAAI7B,IAAI,CAAC;MACdE,KAAK,EAAE,IAAIL,QAAQ,CAAC,CAAC;MACrBM,QAAQ,EAAE,IAAIN,QAAQ,CAACyB,OAAO,CAAC;MAC/BlB,KAAK,EAAE;IACT,CAAC,CAAC;EACJ;AAGF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}