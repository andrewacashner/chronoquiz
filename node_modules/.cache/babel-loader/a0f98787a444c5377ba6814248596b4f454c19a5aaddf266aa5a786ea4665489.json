{"ast":null,"code":"import { defaultTimeline } from \"./timelineReducer\";\nconst defaultAdminState = {\n  // ID of timeline user wants to load\n  timelineID: null,\n  initialTimeline: defaultTimeline,\n  // Update the timeline select options?\n  updateTimelineList: true,\n  // Save client-side timeline to the backend DB?\n  saveReady: false,\n  // Update timeline display?\n  refresh: true,\n  // Does client-side timeline differ from version originally loaded from\n  // backend server?  \n  hasUnsavedChanges: false\n};\nfunction adminReducer(state, action) {\n  let obj = action.payload;\n  let newState = null;\n  switch (action.type) {\n    case \"set\":\n      newState = {\n        ...state,\n        ...obj\n      };\n      break;\n    case \"reset\":\n      newState = defaultAdminState;\n      break;\n    default:\n      newState = state;\n  }\n  return newState;\n}\nexport { adminReducer, defaultAdminState };","map":{"version":3,"names":["defaultTimeline","defaultAdminState","timelineID","initialTimeline","updateTimelineList","saveReady","refresh","hasUnsavedChanges","adminReducer","state","action","obj","payload","newState","type"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/reducers/adminReducer.tsx"],"sourcesContent":["import { defaultTimeline } from \"./timelineReducer\";\n\ninterface AdminState {\n  timelineID: number,\n  initialTimeline: Timeline,\n  updateTimelineList: boolean,\n  saveReady: boolean,\n  refresh: boolean,\n  hasUnsavedChanges: boolean\n}\n\nconst defaultAdminState: AdminState = {\n  // ID of timeline user wants to load\n  timelineID: null,  \n\n  initialTimeline: defaultTimeline,\n\n  // Update the timeline select options?\n  updateTimelineList: true,\n  \n  // Save client-side timeline to the backend DB?\n  saveReady: false,\n  \n  // Update timeline display?\n  refresh: true,\n\n  // Does client-side timeline differ from version originally loaded from\n  // backend server?  \n  hasUnsavedChanges: false, \n};\n\nfunction adminReducer(state: AdminState, action: object): AdminState {\n  let obj = action.payload;\n  let newState = null;\n\n  switch(action.type) {\n    case \"set\":\n      newState = { ...state, ...obj };\n    break;\n\n    case \"reset\":\n      newState = defaultAdminState;\n    break;\n\n    default:\n      newState = state;\n  }\n  return newState;\n}\n\nexport { adminReducer, defaultAdminState };\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,mBAAmB;AAWnD,MAAMC,iBAA6B,GAAG;EACpC;EACAC,UAAU,EAAE,IAAI;EAEhBC,eAAe,EAAEH,eAAe;EAEhC;EACAI,kBAAkB,EAAE,IAAI;EAExB;EACAC,SAAS,EAAE,KAAK;EAEhB;EACAC,OAAO,EAAE,IAAI;EAEb;EACA;EACAC,iBAAiB,EAAE;AACrB,CAAC;AAED,SAASC,YAAYA,CAACC,KAAiB,EAAEC,MAAc,EAAc;EACnE,IAAIC,GAAG,GAAGD,MAAM,CAACE,OAAO;EACxB,IAAIC,QAAQ,GAAG,IAAI;EAEnB,QAAOH,MAAM,CAACI,IAAI;IAChB,KAAK,KAAK;MACRD,QAAQ,GAAG;QAAE,GAAGJ,KAAK;QAAE,GAAGE;MAAI,CAAC;MACjC;IAEA,KAAK,OAAO;MACVE,QAAQ,GAAGZ,iBAAiB;MAC9B;IAEA;MACEY,QAAQ,GAAGJ,KAAK;EACpB;EACA,OAAOI,QAAQ;AACjB;AAEA,SAASL,YAAY,EAAEP,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}