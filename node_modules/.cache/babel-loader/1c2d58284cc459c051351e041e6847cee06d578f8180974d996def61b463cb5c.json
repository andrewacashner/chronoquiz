{"ast":null,"code":"export default class User {\n  constructor({\n    username = \"\",\n    email = \"\",\n    password = \"\"\n  } = {}) {\n    this.username = void 0;\n    this.email = void 0;\n    this.password = void 0;\n    this.username = username;\n    this.email = email;\n    this.password = password;\n  }\n  get isEmpty() {\n    return this.username === \"\" && this.email === \"\" && this.password === \"\";\n  }\n  json() {\n    return JSON.stringify(this);\n  }\n  async request({\n    url,\n    method,\n    bodyObject = this,\n    token = null\n  } = {}) {\n    let authorization = token ? {\n      \"Authorization\": `Token ${token}`\n    } : null;\n    let msg = {\n      method: \"POST\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        ...authorization\n      }),\n      body: JSON.stringify(bodyObject)\n    };\n    let response = await fetch(url, msg);\n    return response;\n  }\n  async exists() {\n    let answer = false;\n    let response = await fetch(`${User.SERVER}/check_user/`, this.postRequest());\n    if (response.ok) {\n      answer = true;\n    } else {\n      console.debug(\"User not found\");\n    }\n    return answer;\n  }\n  async register() {\n    let answer = false;\n    let response = await fetch(`${User.SERVER}/register/`, this.postRequest());\n    if (response.ok) {\n      answer = true;\n    } else {\n      console.debug(\"Could not register user\");\n    }\n    return answer;\n  }\n  async authenticate() {\n    let token = null;\n    let response = await fetch(`${User.SERVER}/login/`, this.postRequest());\n    if (response.ok) {\n      let json = await response.json();\n      token = json.token;\n      console.debug(`Authenticated user ${this.username}`);\n    } else {\n      console.debug(`Problem authenticating user ${this.username}: Response status ${response.status}, ${response.statusText}`);\n    }\n    return token;\n  }\n}\nUser.SERVER = \"http://127.0.0.1:8000\";","map":{"version":3,"names":["User","constructor","username","email","password","isEmpty","json","JSON","stringify","request","url","method","bodyObject","token","authorization","msg","headers","Headers","body","response","fetch","exists","answer","SERVER","postRequest","ok","console","debug","register","authenticate","status","statusText"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/classes/User.tsx"],"sourcesContent":["interface UserInput {\n  username: string,\n  email: string,\n  password: string \n} \n\ninterface Fetch {\n  url: string,\n  method: string,\n  bodyObject: object,\n  token: string\n}\n\n\nexport default class User {\n  username: string;\n  email: string;\n  password: string;\n\n  constructor(\n    { username = \"\",\n      email    = \"\",\n      password = \"\" }: UserInput = {}\n  ) {\n    this.username = username;\n    this.email = email;\n    this.password = password;\n  }\n\n  get isEmpty(): boolean {\n    return (this.username === \"\"\n            && this.email === \"\"\n            && this.password === \"\");\n  }\n\n  json(): string {\n    return JSON.stringify(this);\n  }\n\n  static SERVER = \"http://127.0.0.1:8000\";\n\n  async request({ \n    url, \n    method, \n    bodyObject = this, \n    token = null\n  }: Fetch = {}): object {\n\n    let authorization = token \n      ? { \"Authorization\": `Token ${token}` } \n      : null;\n\n    let msg = {\n      method: \"POST\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        ...authorization\n      }),\n      body: JSON.stringify(bodyObject)\n    }\n\n    let response = await fetch(url, msg);\n    return response;\n  }\n\n  async exists(): boolean {\n    let answer = false;\n    let response = await fetch(`${User.SERVER}/check_user/`, \n                               this.postRequest());\n    if (response.ok) {\n      answer = true;\n    } else {\n      console.debug(\"User not found\");\n    }\n    return answer;\n  }\n\n  async register(): boolean {\n    let answer = false;\n    let response = await fetch(`${User.SERVER}/register/`, \n                               this.postRequest());\n    if (response.ok) {\n      answer = true;\n    } else {\n      console.debug(\"Could not register user\");\n    }\n    return answer;\n  }\n\n  async authenticate(): string {\n    let token = null;\n    let response = await fetch(`${User.SERVER}/login/`, \n                               this.postRequest());\n    if (response.ok) {\n      let json = await response.json();\n      token = json.token;\n      console.debug(`Authenticated user ${this.username}`);\n    } else {\n      console.debug(`Problem authenticating user ${this.username}: Response status ${response.status}, ${response.statusText}`);\n    }\n    return token;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}