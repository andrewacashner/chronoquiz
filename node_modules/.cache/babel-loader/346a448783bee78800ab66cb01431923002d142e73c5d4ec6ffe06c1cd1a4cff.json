{"ast":null,"code":"import debug from \"../lib/debug\";\nimport BackendRequest from \"../classes/BackendRequest\";\n\n// TODO could you include the token as a member?\n\nexport default class User {\n  constructor({\n    username = \"\",\n    password = \"\"\n  } = {}) {\n    this.username = void 0;\n    this.password = void 0;\n    this.username = username;\n    this.password = password;\n  }\n  get isEmpty() {\n    return !Object.values(this).some(v => v);\n  }\n  json() {\n    return JSON.stringify(this);\n  }\n  async exists() {\n    let answer = false;\n    let request = new BackendRequest({\n      url: \"check_user/\",\n      method: \"POST\",\n      bodyObject: this\n    });\n    let response = await request.fetch();\n    if (response.ok) {\n      answer = true;\n    } else {\n      debug(\"User not found\");\n    }\n    return answer;\n  }\n  async register() {\n    let answer = false;\n    let request = new BackendRequest({\n      url: \"register/\",\n      method: \"POST\",\n      bodyObject: this\n    });\n    let response = await request.fetch();\n    if (response.ok) {\n      answer = true;\n    } else {\n      debug(\"Could not register user\");\n    }\n    return answer;\n  }\n  async authenticate() {\n    let token = null;\n    let request = new BackendRequest({\n      url: \"login/\",\n      method: \"POST\",\n      bodyObject: this\n    });\n    let response = await request.fetch();\n    if (response.ok) {\n      let json = await response.json();\n      token = json.token;\n      debug(`Authenticated user ${this.username}`);\n    } else {\n      debug(`Problem authenticating user ${this.username}: Response status ${response.status}, ${response.statusText}`);\n    }\n    return token;\n  }\n}","map":{"version":3,"names":["debug","BackendRequest","User","constructor","username","password","isEmpty","Object","values","some","v","json","JSON","stringify","exists","answer","request","url","method","bodyObject","response","fetch","ok","register","authenticate","token","status","statusText"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/classes/User.tsx"],"sourcesContent":["import debug from \"../lib/debug\";\nimport BackendRequest from \"../classes/BackendRequest\";\n\n// TODO could you include the token as a member?\ninterface UserInput {\n  username: string,\n  password: string,\n  timelineList: array<number> // ID numbers of Timeline models (Django)\n} \n\nexport default class User {\n  username: string;\n  password: string;\n\n  constructor({ username = \"\", password = \"\" }: UserInput = {}) {\n    this.username = username;\n    this.password = password;\n  }\n\n  get isEmpty(): boolean {\n    return !Object.values(this).some(v => v);\n  }\n\n  json(): string {\n    return JSON.stringify(this);\n  }\n\n  async exists(): boolean {\n    let answer = false;\n    let request = new BackendRequest({\n      url: \"check_user/\", \n      method: \"POST\", \n      bodyObject: this\n    });\n    let response = await request.fetch();\n    if (response.ok) {\n      answer = true;\n    } else {\n      debug(\"User not found\");\n    }\n    return answer;\n  }\n\n  async register(): boolean {\n    let answer = false;\n    let request = new BackendRequest({\n      url: \"register/\", \n      method: \"POST\", \n      bodyObject: this\n    });\n    let response = await request.fetch();\n    if (response.ok) {\n      answer = true;\n    } else {\n      debug(\"Could not register user\");\n    }\n    return answer;\n  }\n\n  async authenticate(): string {\n    let token = null;\n    let request = new BackendRequest({\n      url: \"login/\", \n      method: \"POST\", \n      bodyObject: this\n    });\n    let response = await request.fetch();\n    if (response.ok) {\n      let json = await response.json();\n      token = json.token;\n      debug(`Authenticated user ${this.username}`);\n    } else {\n      debug(`Problem authenticating user ${this.username}: Response status ${response.status}, ${response.statusText}`);\n    }\n    return token;\n  }\n\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,cAAc;AAChC,OAAOC,cAAc,MAAM,2BAA2B;;AAEtD;;AAOA,eAAe,MAAMC,IAAI,CAAC;EAIxBC,WAAWA,CAAC;IAAEC,QAAQ,GAAG,EAAE;IAAEC,QAAQ,GAAG;EAAc,CAAC,GAAG,CAAC,CAAC,EAAE;IAAA,KAH9DD,QAAQ;IAAA,KACRC,QAAQ;IAGN,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC1B;EAEA,IAAIC,OAAOA,CAAA,EAAY;IACrB,OAAO,CAACC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC;EAC1C;EAEAC,IAAIA,CAAA,EAAW;IACb,OAAOC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC;EAC7B;EAEA,MAAMC,MAAMA,CAAA,EAAY;IACtB,IAAIC,MAAM,GAAG,KAAK;IAClB,IAAIC,OAAO,GAAG,IAAIf,cAAc,CAAC;MAC/BgB,GAAG,EAAE,aAAa;MAClBC,MAAM,EAAE,MAAM;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,IAAIC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,KAAK,CAAC,CAAC;IACpC,IAAID,QAAQ,CAACE,EAAE,EAAE;MACfP,MAAM,GAAG,IAAI;IACf,CAAC,MAAM;MACLf,KAAK,CAAC,gBAAgB,CAAC;IACzB;IACA,OAAOe,MAAM;EACf;EAEA,MAAMQ,QAAQA,CAAA,EAAY;IACxB,IAAIR,MAAM,GAAG,KAAK;IAClB,IAAIC,OAAO,GAAG,IAAIf,cAAc,CAAC;MAC/BgB,GAAG,EAAE,WAAW;MAChBC,MAAM,EAAE,MAAM;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,IAAIC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,KAAK,CAAC,CAAC;IACpC,IAAID,QAAQ,CAACE,EAAE,EAAE;MACfP,MAAM,GAAG,IAAI;IACf,CAAC,MAAM;MACLf,KAAK,CAAC,yBAAyB,CAAC;IAClC;IACA,OAAOe,MAAM;EACf;EAEA,MAAMS,YAAYA,CAAA,EAAW;IAC3B,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIT,OAAO,GAAG,IAAIf,cAAc,CAAC;MAC/BgB,GAAG,EAAE,QAAQ;MACbC,MAAM,EAAE,MAAM;MACdC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,IAAIC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,KAAK,CAAC,CAAC;IACpC,IAAID,QAAQ,CAACE,EAAE,EAAE;MACf,IAAIX,IAAI,GAAG,MAAMS,QAAQ,CAACT,IAAI,CAAC,CAAC;MAChCc,KAAK,GAAGd,IAAI,CAACc,KAAK;MAClBzB,KAAK,CAAE,sBAAqB,IAAI,CAACI,QAAS,EAAC,CAAC;IAC9C,CAAC,MAAM;MACLJ,KAAK,CAAE,+BAA8B,IAAI,CAACI,QAAS,qBAAoBgB,QAAQ,CAACM,MAAO,KAAIN,QAAQ,CAACO,UAAW,EAAC,CAAC;IACnH;IACA,OAAOF,KAAK;EACd;AAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}