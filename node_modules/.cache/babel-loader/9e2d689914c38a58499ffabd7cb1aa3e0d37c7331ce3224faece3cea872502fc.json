{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nvar _FactList;\nimport Card from \"./Card\";\nimport { default as Color } from \"./RgbColorMix\";\nvar _setColors = /*#__PURE__*/_classPrivateFieldLooseKey(\"setColors\");\nvar _shuffle = /*#__PURE__*/_classPrivateFieldLooseKey(\"shuffle\");\nexport default class FactList {\n  constructor(cards = []) {\n    // Shuffle the array, using the Fisher-Yates/Knuth shuffle\n    // (`https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle`)\n    Object.defineProperty(this, _shuffle, {\n      value: _shuffle2\n    });\n    // PRIVATE METHODS\n    // Set the colors of the cards in this list, in chronological order, to\n    // evenly spaced intervals along the spectrum.\n    Object.defineProperty(this, _setColors, {\n      value: _setColors2\n    });\n    this.items = void 0;\n    this.items = cards;\n  }\n  // PUBLIC METHODS\n\n  clone() {\n    return new FactList([...this.items]);\n  }\n\n  // Sort the array by the date field, ascending.\n  sortByDate() {\n    this.items.sort((c1, c2) => {\n      return c1.date - c2.date;\n    });\n    return this;\n  }\n  sortedByDate() {\n    return this.clone().sortByDate();\n  }\n  setupClues() {\n    _classPrivateFieldLooseBase(this, _setColors)[_setColors]();\n    _classPrivateFieldLooseBase(this, _shuffle)[_shuffle]();\n  }\n  isEmpty() {\n    return this.items.length === 0;\n  }\n  allButLastItems() {\n    return this.items.slice(0, -1);\n  }\n  last() {\n    return this.items.at(-1);\n  }\n  pop() {\n    let card = this.items.pop();\n    return card;\n  }\n  dropLast() {\n    this.pop();\n    return this;\n  }\n  dropLastCopy() {\n    return new FactList(this.items.slice(0, -1));\n  }\n  prepend(item) {\n    this.items.unshift(item);\n    return this;\n  }\n  prependCopy(item) {\n    return new FactList([item, ...this.items]);\n  }\n\n  // Add event to array and then resort by date.\n  addFact(card) {\n    this.items.push(card);\n    this.sortByDate();\n  }\n  resetMargins() {\n    let resetItems = [];\n    for (let i of this.items) {\n      let card = new Card({\n        ...i,\n        expand: false\n      });\n      resetItems.push(card);\n    }\n    return new FactList(resetItems);\n  }\n  addAnswer(answer) {\n    return this.prependCopy(answer).sortedByDate().resetMargins();\n  }\n}\n_FactList = FactList;\nfunction _setColors2() {\n  this.sortByDate();\n  let items = this.items;\n  items.forEach((card, index) => {\n    items[index].color = Color.colorAtIndex(index, items.length, Color.SPECTRUM);\n  });\n  return this;\n}\nfunction _shuffle2() {\n  function randomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n  let items = this.items;\n  for (let i = items.length - 1; i > 0; --i) {\n    let j = randomInt(i);\n    [items[i], items[j]] = [items[j], items[i]];\n  }\n  return this;\n}","map":{"version":3,"names":["Card","default","Color","_setColors","_classPrivateFieldLooseKey","_shuffle","FactList","constructor","cards","Object","defineProperty","value","_shuffle2","_setColors2","items","clone","sortByDate","sort","c1","c2","date","sortedByDate","setupClues","_classPrivateFieldLooseBase","isEmpty","length","allButLastItems","slice","last","at","pop","card","dropLast","dropLastCopy","prepend","item","unshift","prependCopy","addFact","push","resetMargins","resetItems","i","expand","addAnswer","answer","_FactList","forEach","index","color","colorAtIndex","SPECTRUM","randomInt","max","Math","floor","random","j"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/classes/FactList.tsx"],"sourcesContent":["import Card from \"./Card\";\nimport { default as Color } from \"./RgbColorMix\";\n\nexport default class FactList {\n  items: Array<Card>;\n\n  constructor(cards: Array<Card> = []) {\n    this.items = cards;\n  }\n\n  // PRIVATE METHODS\n  \n  // Set the colors of the cards in this list, in chronological order, to\n  // evenly spaced intervals along the spectrum.\n  #setColors(): FactList {\n    this.sortByDate();\n    let items = this.items;\n\n    items.forEach((card, index) => {\n      items[index].color = Color.colorAtIndex(index, items.length, \n                                              Color.SPECTRUM);\n    });\n    return this;\n  } \n\n  // Shuffle the array, using the Fisher-Yates/Knuth shuffle\n  // (`https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle`)\n  #shuffle(): FactList {\n    \n    function randomInt(max: number): number {\n      return Math.floor(Math.random() * max);\n    } \n\n    let items = this.items;\n\n    for (let i = items.length - 1; i > 0; --i) {\n      let j = randomInt(i);\n      [items[i], items[j]] = [items[j], items[i]];\n    }\n\n    return this;\n  }\n\n  // PUBLIC METHODS\n\n  clone(): FactList {\n    return new FactList([...this.items]);\n  }\n\n  // Sort the array by the date field, ascending.\n  sortByDate(): FactList {\n    this.items.sort((c1, c2) => { return c1.date - c2.date });\n    return this;\n  }\n\n  sortedByDate(): FactList {\n    return this.clone().sortByDate();\n  }\n  \n\n  setupClues() {\n    this.#setColors();\n    this.#shuffle();\n  }\n\n  isEmpty(): boolean {\n    return this.items.length === 0;\n  }\n\n  allButLastItems(): Array<Card> {\n    return this.items.slice(0, -1);\n  }\n\n  last(): Card {\n    return this.items.at(-1);\n  }\n\n  pop(): Card {\n    let card = this.items.pop();\n    return card;\n  }\n\n  dropLast(): FactList {\n    this.pop();\n    return this;\n  }\n\n  dropLastCopy(): FactList {\n    return new FactList(this.items.slice(0, -1));\n  }\n\n  prepend(item): FactList {\n    this.items.unshift(item);\n    return this;\n  }\n  \n  prependCopy(item): FactList {\n    return new FactList([item, ...this.items]);\n  }\n\n  // Add event to array and then resort by date.\n  addFact(card) {\n    this.items.push(card);\n    this.sortByDate();\n  }\n\n  resetMargins(): FactList {\n    let resetItems = [];\n    for (let i of this.items) {\n      let card = new Card({...i, expand: false});\n      resetItems.push(card);\n    }\n    return new FactList(resetItems);\n  }\n\n  addAnswer(answer): FactList {\n    return this.prependCopy(answer).sortedByDate().resetMargins();\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}