{"ast":null,"code":"var _jsxFileName = \"/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/components/AdminPanel.tsx\",\n  _s3 = $RefreshSig$();\nimport { useState, useContext, useEffect, useReducer } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport debug from \"../lib/debug\";\nimport Timeline from \"../classes/Timeline\";\nimport UserContext from \"../store/UserContext\";\nimport UploadForm from \"./UploadForm\";\nimport { timelineReducer, defaultTimeline } from \"../reducers/timelineReducer\";\nimport { factReducer, defaultFact } from \"../reducers/factReducer\";\nimport updateReducer from \"../reducers/updateReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AdminPanel() {\n  _s3();\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n  let userContext = useContext(UserContext);\n  let authenticated = userContext.get.authenticated;\n  let currentUser = userContext.get.currentUser;\n  let userToken = userContext.get.userToken;\n\n  // Current timeline on client side\n  let [timelineState, dispatchTimeline] = useReducer(timelineReducer, defaultTimeline);\n\n  // Current new fact card\n  let [factState, dispatchFact] = useReducer(factReducer, defaultFact);\n\n  // Set a single state field from form input\n  const updateTimeline = updateReducer(dispatchTimeline);\n  const updateFact = updateReducer(dispatchFact);\n\n  // Initial timeline loaded\n  let [initialTimeline, setInitialTimeline] = useState(defaultTimeline);\n\n  // Has the user requested to save the timeline (that is, to send client-side\n  // timeline data to the backend database?)\n  let [saveReady, setSaveReady] = useState(false);\n\n  // Used to trigger update of timeline display\n  // TODO is this needed?\n  let [refresh, setRefresh] = useState(true);\n\n  // MONITOR FOR UNSAVED CHANGES\n  // Is the client-side timeline data different from what was originally\n  // received from the backend server? Used to set display of \"save\" and\n  // \"discard changes\" button and to prompt to save unsaved changes when new\n  // timeline is selected\n  let [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n\n  // When a timeline is loaded or changed, record whether there are unsaved\n  // changes (current timeline differs from initial timeline loaded)\n  useEffect(() => {\n    if (initialTimeline) {\n      debug(initialTimeline);\n    }\n    if (timelineState) {\n      debug(timelineState);\n    }\n    let status = timelineState && initialTimeline && !timelineState.equals(initialTimeline);\n    setHasUnsavedChanges(status);\n  }, [timelineState, initialTimeline]);\n\n  // GET LIST OF USER TIMELINES\n  let [timelineList, setTimelineList] = useState([]);\n\n  // Do we need to update the list of user timelines in the select options?\n  let [updateTimelineList, setUpdateTimelineList] = useState(true);\n  useEffect(() => {\n    async function loadTimelineList(token) {\n      let list = await Timeline.listTimelines(token);\n      if (list) {\n        setTimelineList(list);\n      }\n    }\n    if (authenticated && updateTimelineList) {\n      loadTimelineList(userToken);\n      setUpdateTimelineList(false);\n    } else {\n      setTimelineList([]);\n    }\n  }, [authenticated, updateTimelineList, currentUser, userToken]);\n\n  // LOAD A TIMELINE FROM BACKEND\n\n  // 'id' field of Javascript Timeline object on client-side, and of Django\n  // Timeline model on server-side (= primary key)\n  let [timelineID, setTimelineID] = useState(null);\n  useEffect(() => {\n    async function loadTimeline(user, id, token) {\n      debug(`Loading timeline id ${timelineID}`);\n      let newTimeline = await Timeline.newFromBackend(id, token);\n      if (newTimeline) {\n        dispatchTimeline({\n          type: \"set\",\n          payload: newTimeline\n        });\n        setInitialTimeline(newTimeline);\n      }\n    }\n    if (timelineID) {\n      if (!hasUnsavedChanges || window.confirm(\"Your quiz has unsaved changes. Do you want to discard the changes and reload the quiz?\")) {\n        if (timelineID === \"create\") {\n          dispatchTimeline({\n            type: \"reset\"\n          });\n        } else {\n          loadTimeline(currentUser, timelineID, userToken);\n        }\n        setUpdateTimelineList(true);\n        setRefresh(false);\n        setHasUnsavedChanges(false);\n      }\n    }\n  }, [timelineID, currentUser, userToken, refresh]);\n  function PageInstructions() {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"instructions\",\n      children: \"Your data will not be saved until you click Save.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Menu to choose which timeline to load (or create new)\n  function Chooser() {\n    _s();\n    function loadTimeline(event) {\n      event.preventDefault();\n      let data = new FormData(event.target);\n      let id = data.get(\"select-timeline\");\n      setTimelineID(id);\n    }\n    function timelineOption(timeline) {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        value: timeline.id,\n        children: timeline.title\n      }, timeline.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Change display of submit button whether creating or loading\n    let [selection, setSelection] = useState(\"create\");\n    function updateSelection(event) {\n      setSelection(event.target.value);\n    }\n    let loadButtonText = selection === \"create\" ? \"Create\" : \"Load\";\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"chooser\",\n      onSubmit: loadTimeline,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"select-timeline\",\n        children: \"Select a Timeline:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"select-timeline\",\n        defaultValue: \"create\",\n        onChange: updateSelection,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"create\",\n          children: \"Create New\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), timelineList.map(timelineOption)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: loadButtonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  }\n  _s(Chooser, \"wOynFYa80dq3aHLlPdtTl1U14Kw=\");\n  function MetadataPanel() {\n    let creator = timelineState.creator === \"\" ? currentUser.username : timelineState.creator;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"metadata\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Metadata\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"timelinePanel\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formInputBlock\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"title\",\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"title\",\n              onBlur: updateTimeline(\"title\"),\n              defaultValue: timelineState.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"description\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"description\",\n              onBlur: updateTimeline(\"description\"),\n              defaultValue: timelineState.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"keywords\",\n              children: \"Keywords (separated with semicolons)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"keywords\",\n              onBlur: updateTimeline(\"keywords\", Timeline.parseKeywords),\n              defaultValue: timelineState.keywordString\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"creator\",\n              children: \"Creator (for public display; default: your username)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"creator\",\n              onBlur: updateTimeline(\"creator\"),\n              defaultValue: creator\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this);\n  }\n  function CurrentFactsPanel() {\n    function currentFact(item) {\n      function deleteFact(event) {\n        if (window.confirm(\"Are you sure you want to delete the current fact?\")) {\n          debug(`Delete item (date ${item.date.getFullYear()})`);\n          dispatchTimeline({\n            type: \"removeFact\",\n            payload: {\n              fact: item\n            }\n          });\n        }\n      }\n      function editFact(event) {\n        debug(`Edit item (date ${item.date.getFullYear()})`);\n        dispatchFact({\n          type: \"set\",\n          payload: item\n        });\n        dispatchTimeline({\n          type: \"removeFact\",\n          payload: {\n            fact: item\n          }\n        });\n      }\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"FactListControls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: editFact,\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: deleteFact,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: String(item.year)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.info\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: item.img\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, crypto.randomUUID(), true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this);\n    }\n    function TimelineInstructions() {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"instructions\",\n          children: \"Enter timeline events manually or upload the data using the forms below\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UploadForm, {\n          dispatch: dispatchTimeline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"currentTimeline\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Current Timeline Events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TimelineInstructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"timeline\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Controls\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Image URL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: timelineState.facts.map(currentFact)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this);\n  }\n  function NewFactForm() {\n    function newFact(event) {\n      if (factState.date && factState.info) {\n        dispatchTimeline({\n          type: \"addFact\",\n          payload: {\n            fact: factState\n          }\n        });\n        debug(\"Added fact to timeline\");\n        dispatchFact({\n          type: \"reset\"\n        });\n      }\n    }\n    function CardPreview({\n      fact: Fact\n    }) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        \"data-when\": factState.year,\n        \"data-noselect\": \"noselect\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"date\",\n          children: factState.year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: factState.img,\n          src: factState.img\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"info\",\n          children: factState.info\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"new\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add an Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"addFactForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formInputBlock\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"date\",\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              name: \"date\",\n              max: defaultFact.year,\n              onChange: updateFact(\"date\", Fact.dateFromYear),\n              defaultValue: factState.year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"info\",\n              children: \"Description of event\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"info\",\n              onBlur: updateFact(\"info\"),\n              defaultValue: factState.info\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formItem\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"img\",\n              children: \"Complete URL of image (optional)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"url\",\n              name: \"img\",\n              onBlur: updateFact(\"img\"),\n              defaultValue: factState.img\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          id: \"preview\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardPreview, {\n            fact: factState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          id: \"add\",\n          onClick: newFact,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this);\n  }\n  function activeStyle(isActive) {\n    return isActive ? \"active\" : \"inactive\";\n  }\n  function SaveButton() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: activeStyle(hasUnsavedChanges),\n      id: \"save\",\n      type: \"button\",\n      onClick: saveTimeline,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Send current timeline state to backend to save\n  function saveTimeline(event) {\n    let action = timelineState ? \"Updated\" : \"Created\";\n    debug(`${action} timeline with title '${timelineState.title}'`);\n    setSaveReady(true);\n  }\n  useEffect(() => {\n    async function postTimeline(user, token, timeline) {\n      debug(timeline.facts);\n      debug(timeline.json());\n      let request = new BackendRequest({\n        url: \"timeline-full/\",\n        method: \"POST\",\n        token: token,\n        bodyObject: timeline.json()\n      });\n      let response = await request.fetch();\n      if (response.ok) {\n        let json = await response.json();\n        debug(json);\n      } else {\n        debug(`Problem creating timeline: Server status ${response.status}, ${response.statusText}`);\n      }\n    }\n    if (saveReady) {\n      debug(\"Ready to post timeline\");\n      debug(timelineState);\n      postTimeline(currentUser, userToken, timelineState);\n      setSaveReady(false);\n      setUpdateTimelineList(true);\n      setHasUnsavedChanges(false);\n    }\n  }, [saveReady, timelineState, currentUser, userToken]);\n  function DeleteTimelineButton() {\n    _s2();\n    let [timelineToDelete, setTimelineToDelete] = useState(null);\n    function deleteTimeline() {\n      if (window.confirm(\"Are you sure you want to delete this quiz? All of its fact cards will be lost. This action cannot be undone.\")) {\n        debug(timelineID);\n        setTimelineToDelete(timelineID);\n      }\n    }\n    useEffect(() => {\n      async function requestDeletion(timelineID, token) {\n        let result = false;\n        let request = new BackendRequest({\n          url: `timelines/${timelineID}/`,\n          method: \"DELETE\",\n          token: token\n        });\n        let response = await request.fetch();\n        if (response.ok) {\n          let json = await response.json();\n          debug(json);\n          result = true;\n        } else {\n          debug(`Could not delete timeline with id ${timelineID}: Server status ${response.status}, ${response.statusText}`);\n          result = false;\n        }\n        return result;\n      }\n      if (timelineToDelete !== null) {\n        debug(`Deleting timeline with id ${timelineToDelete}`);\n        if (timelineID === \"create\") {\n          dispatchTimeline({\n            type: \"reset\"\n          });\n        } else {\n          let deleted = requestDeletion(timelineToDelete, userToken);\n          if (deleted) {\n            dispatchTimeline({\n              type: \"reset\"\n            });\n            setUpdateTimelineList(true);\n          }\n        }\n        setTimelineToDelete(null);\n      }\n    }, [timelineToDelete]);\n    let msg = timelineID === \"create\" ? \"Reset Quiz\" : \"Delete Quiz\";\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"deleteTimeline\",\n      type: \"button\",\n      onClick: deleteTimeline,\n      children: msg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this);\n  }\n  _s2(DeleteTimelineButton, \"rwotnil7EzBwzm0zKNHwJYsHVHg=\");\n  function DiscardChangesButton() {\n    function discardChanges(event) {\n      setRefresh(true);\n    }\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: activeStyle(hasUnsavedChanges),\n      onClick: discardChanges,\n      children: \"Discard Changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }, this);\n  }\n  function Controls() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(SaveButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DiscardChangesButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DeleteTimelineButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this);\n  }\n  let navigate = useNavigate();\n  if (authenticated) {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Manage Your Quizzes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PageInstructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chooser, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MetadataPanel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CurrentFactsPanel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewFactForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this);\n  } else {\n    navigate(\"/login\");\n  }\n}\n_s3(AdminPanel, \"VGP/zoC0L+IfIu8dslAkGrF2Yig=\", false, function () {\n  return [useNavigate];\n});\n_c = AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["useState","useContext","useEffect","useReducer","useNavigate","debug","Timeline","UserContext","UploadForm","timelineReducer","defaultTimeline","factReducer","defaultFact","updateReducer","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminPanel","_s3","_s","$RefreshSig$","_s2","userContext","authenticated","get","currentUser","userToken","timelineState","dispatchTimeline","factState","dispatchFact","updateTimeline","updateFact","initialTimeline","setInitialTimeline","saveReady","setSaveReady","refresh","setRefresh","hasUnsavedChanges","setHasUnsavedChanges","status","equals","timelineList","setTimelineList","updateTimelineList","setUpdateTimelineList","loadTimelineList","token","list","listTimelines","timelineID","setTimelineID","loadTimeline","user","id","newTimeline","newFromBackend","type","payload","window","confirm","PageInstructions","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Chooser","event","preventDefault","data","FormData","target","timelineOption","timeline","value","title","selection","setSelection","updateSelection","loadButtonText","onSubmit","htmlFor","name","defaultValue","onChange","map","MetadataPanel","creator","username","onBlur","description","parseKeywords","keywordString","CurrentFactsPanel","currentFact","item","deleteFact","date","getFullYear","fact","editFact","onClick","String","year","info","img","crypto","randomUUID","TimelineInstructions","dispatch","facts","NewFactForm","newFact","CardPreview","Fact","alt","src","max","dateFromYear","activeStyle","isActive","SaveButton","saveTimeline","action","postTimeline","json","request","BackendRequest","url","method","bodyObject","response","fetch","ok","statusText","DeleteTimelineButton","timelineToDelete","setTimelineToDelete","deleteTimeline","requestDeletion","result","deleted","msg","DiscardChangesButton","discardChanges","Controls","navigate","_c","$RefreshReg$"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/components/AdminPanel.tsx"],"sourcesContent":["import { useState, useContext, useEffect, useReducer } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport debug from \"../lib/debug\";\n\nimport User from \"../classes/User\";\nimport Timeline from \"../classes/Timeline\";\n\nimport UserContext from \"../store/UserContext\";\n\nimport UploadForm from \"./UploadForm\";\n\nimport { timelineReducer, defaultTimeline } from \"../reducers/timelineReducer\";\nimport { factReducer, defaultFact } from \"../reducers/factReducer\";\nimport updateReducer from \"../reducers/updateReducer\";\n\nexport default function AdminPanel(): React.ReactElement {\n  let userContext = useContext(UserContext);\n  let authenticated = userContext.get.authenticated;\n  let currentUser   = userContext.get.currentUser;\n  let userToken     = userContext.get.userToken;\n\n  // Current timeline on client side\n  let [timelineState, dispatchTimeline] = useReducer(timelineReducer, defaultTimeline);\n\n  // Current new fact card\n  let [factState, dispatchFact] = useReducer(factReducer, defaultFact);\n\n  // Set a single state field from form input\n  const updateTimeline = updateReducer(dispatchTimeline);\n  const updateFact = updateReducer(dispatchFact);\n\n  // Initial timeline loaded\n  let [initialTimeline, setInitialTimeline] = useState(defaultTimeline);\n\n\n  // Has the user requested to save the timeline (that is, to send client-side\n  // timeline data to the backend database?)\n  let [saveReady, setSaveReady] = useState(false);\n\n  // Used to trigger update of timeline display\n  // TODO is this needed?\n  let [refresh, setRefresh] = useState(true);\n\n  // MONITOR FOR UNSAVED CHANGES\n  // Is the client-side timeline data different from what was originally\n  // received from the backend server? Used to set display of \"save\" and\n  // \"discard changes\" button and to prompt to save unsaved changes when new\n  // timeline is selected\n  let [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n\n  // When a timeline is loaded or changed, record whether there are unsaved\n  // changes (current timeline differs from initial timeline loaded)\n  useEffect(() => {\n    if (initialTimeline) { debug(initialTimeline); }\n    if (timelineState) { debug(timelineState); }\n    \n    let status = (timelineState && initialTimeline\n                  && !timelineState.equals(initialTimeline));\n\n    setHasUnsavedChanges(status);\n  }, [timelineState, initialTimeline]);\n\n\n  // GET LIST OF USER TIMELINES\n  let [timelineList, setTimelineList] = useState([]);\n  \n  // Do we need to update the list of user timelines in the select options?\n  let [updateTimelineList, setUpdateTimelineList] = useState(true);\n  \n  useEffect(() => {\n    async function loadTimelineList(token: string): void {\n      let list = await Timeline.listTimelines(token);\n      if (list) {\n        setTimelineList(list);\n      }\n    }\n\n    if (authenticated && updateTimelineList) {\n      loadTimelineList(userToken);\n      setUpdateTimelineList(false);\n    } else {\n      setTimelineList([]);\n    }\n  }, [authenticated, updateTimelineList, currentUser, userToken]);\n\n\n  // LOAD A TIMELINE FROM BACKEND\n\n  // 'id' field of Javascript Timeline object on client-side, and of Django\n  // Timeline model on server-side (= primary key)\n  let [timelineID, setTimelineID] = useState(null);\n\n  useEffect(() => {\n    async function loadTimeline(user: User, id: number, token: string): void {\n      debug(`Loading timeline id ${timelineID}`);\n\n      let newTimeline = await Timeline.newFromBackend(id, token);\n      if (newTimeline) {\n        dispatchTimeline({ type: \"set\", payload: newTimeline });\n        setInitialTimeline(newTimeline);\n      } \n    }\n\n    if (timelineID) {\n      if (!hasUnsavedChanges \n            || window.confirm(\"Your quiz has unsaved changes. Do you want to discard the changes and reload the quiz?\")) {\n\n        if (timelineID === \"create\") {\n          dispatchTimeline({ type: \"reset\" });\n        } else {\n          loadTimeline(currentUser, timelineID, userToken);\n        }\n        setUpdateTimelineList(true);\n        setRefresh(false);\n        setHasUnsavedChanges(false);\n      }\n    }\n  }, [timelineID, currentUser, userToken, refresh]);\n\n  function PageInstructions(): React.ReactElement {\n    return(\n      <p className=\"instructions\">Your data will not be saved until you click Save.</p>\n    );\n  }\n\n  // Menu to choose which timeline to load (or create new)\n  function Chooser(): React.ReactElement {\n    function loadTimeline(event: React.FormEvent<HTMLFormElement>): void {\n      event.preventDefault();\n      let data = new FormData(event.target);\n      let id = data.get(\"select-timeline\");\n      setTimelineID(id);\n    }\n\n    function timelineOption(timeline: Timeline): React.ReactElement {\n      return(\n        <option key={timeline.id} value={timeline.id}>{timeline.title}</option>\n      );\n    }\n\n    // Change display of submit button whether creating or loading\n    let [selection, setSelection] = useState(\"create\");\n\n    function updateSelection(event: React.FormEvent<HTMLFormElement>): void {\n      setSelection(event.target.value);\n    }\n\n    let loadButtonText = (selection === \"create\") ? \"Create\" : \"Load\";\n\n    return(\n      <form id=\"chooser\" onSubmit={loadTimeline}>\n        <label htmlFor=\"select-timeline\">Select a Timeline:</label>\n        <select name=\"select-timeline\" \n          defaultValue=\"create\" \n          onChange={updateSelection}>\n          <option value=\"create\">Create New</option>\n          { timelineList.map(timelineOption) }\n        </select>\n        <button type=\"submit\">{ loadButtonText }</button>\n      </form>\n    );\n  }\n\n  function MetadataPanel(): React.ReactElement {\n    let creator = (timelineState.creator === \"\") \n                  ? currentUser.username \n                  : timelineState.creator;\n\n    return(\n      <section id=\"metadata\">\n        <h2>Metadata</h2>\n        <form className=\"timelinePanel\">\n          <div className=\"formInputBlock\">\n            <div className=\"formItem\">\n              <label htmlFor=\"title\">Title</label>\n              <input type=\"text\" name=\"title\" \n                onBlur={updateTimeline(\"title\")}\n                defaultValue={timelineState.title} />\n            </div>\n            <div className=\"formItem\">\n              <label htmlFor=\"description\">Description</label>\n              <input type=\"text\" name=\"description\" \n                onBlur={updateTimeline(\"description\")}\n                defaultValue={timelineState.description} />\n            </div>\n            <div className=\"formItem\">\n              <label htmlFor=\"keywords\">Keywords (separated with semicolons)</label>\n              <input type=\"text\" name=\"keywords\" \n                onBlur={updateTimeline(\"keywords\", Timeline.parseKeywords)}\n                defaultValue={timelineState.keywordString} />\n            </div>\n            <div className=\"formItem\">\n              <label htmlFor=\"creator\">Creator (for public display; default: your username)</label>\n              <input type=\"text\" name=\"creator\" \n                onBlur={updateTimeline(\"creator\")}\n                defaultValue={creator}/>\n            </div>\n          </div>\n        </form>\n      </section>\n    );\n  }\n\n  function CurrentFactsPanel(): React.ReactElement {\n\n    function currentFact(item: Fact): React.ReactElement {\n\n      function deleteFact(event: React.MouseEvent<HTMLInputElement>): void {\n        if (window.confirm(\"Are you sure you want to delete the current fact?\")) {\n          debug(`Delete item (date ${item.date.getFullYear()})`);\n          dispatchTimeline({ \n            type: \"removeFact\",\n            payload: { fact: item }\n          });\n        }\n      }\n\n      function editFact(event: React.MouseEvent<HTMLInputElement>): void {\n        debug(`Edit item (date ${item.date.getFullYear()})`);\n        dispatchFact({\n          type: \"set\",\n          payload: item\n        });\n        dispatchTimeline({ \n          type: \"removeFact\",\n          payload: { fact: item }\n        });\n      }\n\n      return(\n        <tr key={crypto.randomUUID()}>\n          <td>\n            <div className=\"FactListControls\">\n              <button type=\"button\" onClick={editFact}>Edit</button>\n              <button type=\"button\" onClick={deleteFact}>Delete</button>\n            </div>\n          </td>\n          <td>{String(item.year)}</td>\n          <td>{item.info}</td>\n          <td>{item.img}</td>\n        </tr>\n      );\n    }\n\n    function TimelineInstructions(): React.ReactElement {\n      return(\n        <>\n          <p className=\"instructions\">Enter timeline events manually or upload the data using the forms below</p>\n          <UploadForm dispatch={dispatchTimeline} />\n        </>\n      );\n    }\n\n    return(\n      <section id=\"currentTimeline\">\n        <h2>Current Timeline Events</h2>\n        <TimelineInstructions />\n        <table className=\"timeline\">\n          <thead>\n            <tr>\n              <th>Controls</th>\n              <th>Year</th>\n              <th>Description</th>\n              <th>Image URL</th>\n            </tr>\n          </thead>\n          <tbody>\n            { timelineState.facts.map(currentFact) }\n          </tbody>\n        </table>\n      </section>\n    );\n  }\n\n  function NewFactForm(): React.ReactElement {\n\n    function newFact(event: React.FormEvent<HTMLFormElement>) {\n      if (factState.date && factState.info) {\n        dispatchTimeline({\n          type: \"addFact\",\n          payload: { fact: factState }\n        });\n        debug(\"Added fact to timeline\");\n        dispatchFact({ type: \"reset\" });\n      }\n    }\n    \n    function CardPreview({ fact: Fact }): React.ReactElement {\n      return(\n        <div className=\"card\" data-when={factState.year} data-noselect=\"noselect\">\n          <span className=\"date\">{factState.year}</span>\n          <img alt={factState.img} src={factState.img} />\n          <span className=\"info\">{factState.info}</span>\n        </div>\n      );\n    }\n\n    return(\n      <section id=\"new\">\n        <h2>Add an Event</h2>\n        <form id=\"addFactForm\">\n          <div className=\"formInputBlock\">\n            <div className=\"formItem\">\n              <label htmlFor=\"date\">Year</label>\n              <input \n                type=\"number\" \n                name=\"date\" \n                max={defaultFact.year}\n                onChange={updateFact(\"date\", Fact.dateFromYear)}\n                defaultValue={factState.year} />\n            </div>\n            <div className=\"formItem\">\n              <label htmlFor=\"info\">Description of event</label>\n              <input \n                type=\"text\" \n                name=\"info\" \n                onBlur={updateFact(\"info\")}\n                defaultValue={factState.info} />\n            </div>\n            <div className=\"formItem\">\n              <label htmlFor=\"img\">Complete URL of image (optional)</label>\n              <input \n                type=\"url\" \n                name=\"img\" \n                onBlur={updateFact(\"img\")}\n                defaultValue={factState.img} />\n            </div>\n          </div>\n          <section id=\"preview\">\n            <h3>Preview</h3>\n            <CardPreview fact={factState} />\n          </section>\n          <button type=\"button\" id=\"add\" onClick={newFact}>Add</button>\n        </form>\n      </section>\n    );\n  }\n\n  function activeStyle(isActive: boolean): string {\n    return isActive ? \"active\" : \"inactive\";\n  }\n  \n  function SaveButton(): React.ReactElement {\n    return(\n      <button \n        className={activeStyle(hasUnsavedChanges)} \n        id=\"save\" \n        type=\"button\" \n        onClick={saveTimeline}>Save</button>\n    );\n  }\n\n  // Send current timeline state to backend to save\n  function saveTimeline(event: React.FormEvent<HTMLFormElement>): void {\n    let action = timelineState ? \"Updated\" : \"Created\";\n    debug(`${action} timeline with title '${timelineState.title}'`);\n    setSaveReady(true);\n  }\n\n  useEffect(() => {\n    async function postTimeline(\n      user: User, \n      token: string, \n      timeline: Timeline\n    ): void {\n\n      debug(timeline.facts);\n      debug(timeline.json());\n\n      let request = new BackendRequest({\n        url: \"timeline-full/\",\n        method: \"POST\",\n        token: token,\n        bodyObject: timeline.json()\n      });\n\n      let response = await request.fetch();\n\n      if (response.ok) {\n        let json = await response.json();\n        debug(json);\n      } else {\n        debug(`Problem creating timeline: Server status ${response.status}, ${response.statusText}`);\n      }\n    }\n\n    if (saveReady) {\n      debug(\"Ready to post timeline\");\n      debug(timelineState);\n      postTimeline(currentUser, userToken, timelineState);\n      setSaveReady(false);\n      setUpdateTimelineList(true);\n      setHasUnsavedChanges(false);\n    } \n  }, [saveReady, timelineState, currentUser, userToken]);\n  \n\n  function DeleteTimelineButton() {\n    let [timelineToDelete, setTimelineToDelete] = useState(null);\n\n    function deleteTimeline() {\n      if (window.confirm(\"Are you sure you want to delete this quiz? All of its fact cards will be lost. This action cannot be undone.\")) {\n        debug(timelineID);\n        setTimelineToDelete(timelineID);\n      }\n    }\n\n    useEffect(() => {\n      async function requestDeletion(timelineID, token) {\n        let result = false;\n        let request = new BackendRequest({\n          url: `timelines/${timelineID}/`,\n          method: \"DELETE\",\n          token: token\n        });\n        let response = await request.fetch();\n        if (response.ok) {\n          let json = await response.json();\n          debug(json);\n          result = true;\n        } else {\n          debug(`Could not delete timeline with id ${timelineID}: Server status ${response.status}, ${response.statusText}`);\n          result = false;\n        }\n        return result;\n      }\n\n      if (timelineToDelete !== null) {\n        debug(`Deleting timeline with id ${timelineToDelete}`);\n\n        if (timelineID === \"create\") {\n          dispatchTimeline({ type: \"reset\" });\n        } else {\n          let deleted = requestDeletion(timelineToDelete, userToken);\n          if (deleted) {\n            dispatchTimeline({ type: \"reset\" });\n            setUpdateTimelineList(true);\n          }\n        }\n\n        setTimelineToDelete(null);\n      }\n    }, [timelineToDelete]);\n\n    let msg = (timelineID === \"create\") ? \"Reset Quiz\" : \"Delete Quiz\";\n    return(\n      <button id=\"deleteTimeline\" type=\"button\" onClick={deleteTimeline}>{ msg }</button>\n    );\n  }\n\n\n  function DiscardChangesButton() {\n    function discardChanges(event) {\n      setRefresh(true);\n    }\n\n    return(\n      <button type=\"button\" className={activeStyle(hasUnsavedChanges)} onClick={discardChanges}>Discard Changes</button>\n    );\n  }\n\n  function Controls() {\n    return(\n      <div className=\"controls\">\n        <SaveButton />\n        <DiscardChangesButton />\n        <DeleteTimelineButton />\n      </div>\n    );\n  }\n  let navigate = useNavigate();\n\n  if (authenticated) {\n    return(\n      <main>\n        <h1>Manage Your Quizzes</h1>\n        <PageInstructions />\n        <Chooser />\n        <MetadataPanel />\n        <CurrentFactsPanel />\n        <NewFactForm />\n        <Controls />\n      </main>\n    );\n  } else {\n    navigate(\"/login\");\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}