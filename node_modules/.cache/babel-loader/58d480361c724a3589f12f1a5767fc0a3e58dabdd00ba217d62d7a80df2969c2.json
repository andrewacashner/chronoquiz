{"ast":null,"code":"var _jsxFileName = \"/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/components/AdminChooser.tsx\",\n  _s = $RefreshSig$();\n// Menu to choose which timeline to load (or create new)\n\nimport { useState, useContext, useEffect } from \"react\";\nimport Timeline from \"../classes/Timeline\";\nimport UserContext from \"../store/UserContext\";\nimport AdminContext from \"../store/AdminContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminChooser() {\n  _s();\n  let userContext = useContext(UserContext);\n  let authenticated = userContext.get.authenticated;\n  let currentUser = userContext.get.currentUser;\n  let userToken = userContext.get.userToken;\n  let timelineList = userContext.get.timelineList;\n  let dispatchTimeline = userContext.set;\n  let adminContext = useContext(AdminContext);\n  let update = adminContext.get.updateTimelineList;\n  let setUpdate = adminContext.get.updateTimelineList;\n  let dispatchAdmin = adminContext.set;\n  function loadTimeline(event) {\n    event.preventDefault();\n    let data = new FormData(event.target);\n    let id = data.get(\"select-timeline\");\n    dispatchAdmin({\n      type: \"id\",\n      payload: id\n    });\n  }\n  useEffect(() => {\n    async function loadTimelineList(token) {\n      let list = await Timeline.listTimelines(token);\n      if (list) {\n        dispatchTimeline({\n          type: \"list\",\n          payload: list\n        });\n      }\n    }\n    if (authenticated && update) {\n      loadTimelineList(userToken);\n      dispatchAdmin({\n        type: \"set\",\n        payload: {\n          updateTimelineList: false\n        }\n      });\n    } else {\n      dispatchTimeline({\n        type: \"list\",\n        payload: []\n      });\n    }\n  }, [authenticated, update, dispatchAdmin, dispatchTimeline, currentUser, userToken]);\n  // TODO this is not being triggered by the 'update' state in the parent\n  // component\n\n  function timelineOption(timeline) {\n    return /*#__PURE__*/_jsxDEV(\"option\", {\n      value: timeline.id,\n      children: timeline.title\n    }, timeline.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Change display of submit button whether creating or loading\n  let [selection, setSelection] = useState(\"create\");\n  function updateSelection(event) {\n    setSelection(event.target.value);\n  }\n  let loadButtonText = selection === \"create\" ? \"Create\" : \"Load\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"chooser\",\n    onSubmit: loadTimeline,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"select-timeline\",\n      children: \"Select a Timeline:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"select-timeline\",\n      defaultValue: \"create\",\n      onChange: updateSelection,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"create\",\n        children: \"Create New\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), timelineList.map(timelineOption)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: loadButtonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminChooser, \"ZYPBPBNH3dtYPe8apwEoqpECQ0U=\");\n_c = AdminChooser;\nvar _c;\n$RefreshReg$(_c, \"AdminChooser\");","map":{"version":3,"names":["useState","useContext","useEffect","Timeline","UserContext","AdminContext","jsxDEV","_jsxDEV","AdminChooser","_s","userContext","authenticated","get","currentUser","userToken","timelineList","dispatchTimeline","set","adminContext","update","updateTimelineList","setUpdate","dispatchAdmin","loadTimeline","event","preventDefault","data","FormData","target","id","type","payload","loadTimelineList","token","list","listTimelines","timelineOption","timeline","value","children","title","fileName","_jsxFileName","lineNumber","columnNumber","selection","setSelection","updateSelection","loadButtonText","onSubmit","htmlFor","name","defaultValue","onChange","map","_c","$RefreshReg$"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/components/AdminChooser.tsx"],"sourcesContent":["// Menu to choose which timeline to load (or create new)\n\nimport { useState, useContext, useEffect } from \"react\";\nimport Timeline from \"../classes/Timeline\";\n\nimport UserContext from \"../store/UserContext\";\nimport AdminContext from \"../store/AdminContext\";\n\nexport default function AdminChooser(): React.ReactElement {\n\n  let userContext = useContext(UserContext);\n  let authenticated    = userContext.get.authenticated;\n  let currentUser      = userContext.get.currentUser;\n  let userToken        = userContext.get.userToken;\n  let timelineList     = userContext.get.timelineList;\n  let dispatchTimeline = userContext.set;\n\n  let adminContext = useContext(AdminContext);\n  let update           = adminContext.get.updateTimelineList;\n  let setUpdate        = adminContext.get.updateTimelineList;\n  let dispatchAdmin    = adminContext.set;\n\n  function loadTimeline(event: React.FormEvent<HTMLFormElement>): void {\n    event.preventDefault();\n    let data = new FormData(event.target);\n    let id = data.get(\"select-timeline\");\n    dispatchAdmin({ type: \"id\", payload: id });\n  }\n\n  useEffect(() => {\n    async function loadTimelineList(token: string): void {\n      let list = await Timeline.listTimelines(token);\n      if (list) {\n        dispatchTimeline({ type: \"list\", payload: list });\n      }\n    }\n\n    if (authenticated && update) {\n      loadTimelineList(userToken);\n      dispatchAdmin({ \n        type: \"set\",\n        payload: { updateTimelineList: false }\n      });\n    } else {\n      dispatchTimeline({ type: \"list\", payload: [] });\n    }\n  }, [authenticated, update, dispatchAdmin, dispatchTimeline, currentUser, userToken]);\n  // TODO this is not being triggered by the 'update' state in the parent\n  // component\n\n\n  function timelineOption(timeline: Timeline): React.ReactElement {\n    return(\n      <option key={timeline.id} value={timeline.id}>{timeline.title}</option>\n    );\n  }\n\n  // Change display of submit button whether creating or loading\n  let [selection, setSelection] = useState(\"create\");\n\n  function updateSelection(event: React.FormEvent<HTMLFormElement>): void {\n    setSelection(event.target.value);\n  }\n\n  let loadButtonText = (selection === \"create\") ? \"Create\" : \"Load\";\n\n  return(\n    <form id=\"chooser\" onSubmit={loadTimeline}>\n      <label htmlFor=\"select-timeline\">Select a Timeline:</label>\n      <select name=\"select-timeline\" \n        defaultValue=\"create\" \n        onChange={updateSelection}>\n        <option value=\"create\">Create New</option>\n        { timelineList.map(timelineOption) }\n      </select>\n      <button type=\"submit\">{ loadButtonText }</button>\n    </form>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}