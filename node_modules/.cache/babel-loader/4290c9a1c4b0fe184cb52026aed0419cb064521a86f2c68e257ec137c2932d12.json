{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nvar _FactList;\nimport Card from \"./Card\";\nimport { default as Color } from \"./RgbColorMix\";\nvar _items = /*#__PURE__*/_classPrivateFieldLooseKey(\"items\");\nvar _setColors = /*#__PURE__*/_classPrivateFieldLooseKey(\"setColors\");\nvar _shuffle = /*#__PURE__*/_classPrivateFieldLooseKey(\"shuffle\");\nexport default class FactList {\n  constructor(cards = []) {\n    // Shuffle the array, using the Fisher-Yates/Knuth shuffle\n    // (`https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle`)\n    Object.defineProperty(this, _shuffle, {\n      value: _shuffle2\n    });\n    // PRIVATE METHODS\n    // Set the colors of the cards in this list, in chronological order, to\n    // evenly spaced intervals along the spectrum.\n    Object.defineProperty(this, _setColors, {\n      value: _setColors2\n    });\n    Object.defineProperty(this, _items, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _items)[_items] = cards;\n  }\n  // PUBLIC METHODS\n\n  clone() {\n    return new FactList([..._classPrivateFieldLooseBase(this, _items)[_items]]);\n  }\n\n  // Sort the array by the date field, ascending.\n  sortByDate() {\n    _classPrivateFieldLooseBase(this, _items)[_items].sort((c1, c2) => {\n      return c1.date - c2.date;\n    });\n    return this;\n  }\n  sortedByDate() {\n    return this.clone().sortByDate();\n  }\n  setupClues() {\n    _classPrivateFieldLooseBase(this, _setColors)[_setColors]();\n    _classPrivateFieldLooseBase(this, _shuffle)[_shuffle]();\n  }\n  get length() {\n    return _classPrivateFieldLooseBase(this, _items)[_items].length;\n  }\n  isEmpty() {\n    return this.length === 0;\n  }\n  allButLastItems() {\n    return _classPrivateFieldLooseBase(this, _items)[_items].slice(0, -1);\n  }\n  last() {\n    return _classPrivateFieldLooseBase(this, _items)[_items].at(-1);\n  }\n  pop() {\n    let card = _classPrivateFieldLooseBase(this, _items)[_items].pop();\n    return card;\n  }\n  dropLast() {\n    this.pop();\n    return this;\n  }\n  dropLastCopy() {\n    return new FactList(_classPrivateFieldLooseBase(this, _items)[_items].slice(0, -1));\n  }\n  prepend(item) {\n    _classPrivateFieldLooseBase(this, _items)[_items].unshift(item);\n    return this;\n  }\n  prependCopy(item) {\n    return new FactList([item, ..._classPrivateFieldLooseBase(this, _items)[_items]]);\n  }\n\n  // Add event to array and then resort by date.\n  addFact(card) {\n    _classPrivateFieldLooseBase(this, _items)[_items].push(card);\n    this.sortByDate();\n  }\n  resetMargins() {\n    let resetItems = [];\n    for (let i of _classPrivateFieldLooseBase(this, _items)[_items]) {\n      let card = new Card({\n        ...i,\n        expand: false\n      });\n      resetItems.push(card);\n    }\n    return new FactList(resetItems);\n  }\n  addAnswer(answer) {\n    return this.prependCopy(answer).sortedByDate().resetMargins();\n  }\n  findById(id) {\n    return _classPrivateFieldLooseBase(this, _items)[_items].find(c => c.id === id);\n  }\n  findIndexById(id) {\n    return _classPrivateFieldLooseBase(this, _items)[_items].findIndex(c => c.id === id);\n  }\n  at(index) {\n    return _classPrivateFieldLooseBase(this, _items)[_items].at(index);\n  }\n  map(fn) {\n    return _classPrivateFieldLooseBase(this, _items)[_items].map(fn);\n  }\n  appendClone(newCard) {\n    return this.clone().addFact(newCard);\n  }\n}\n_FactList = FactList;\nfunction _setColors2() {\n  this.sortByDate();\n  let items = _classPrivateFieldLooseBase(this, _items)[_items];\n  items.forEach((card, index) => {\n    items[index].color = Color.colorAtIndex(index, items.length, Color.SPECTRUM);\n  });\n  return this;\n}\nfunction _shuffle2() {\n  function randomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n  let items = _classPrivateFieldLooseBase(this, _items)[_items];\n  for (let i = items.length - 1; i > 0; --i) {\n    let j = randomInt(i);\n    [items[i], items[j]] = [items[j], items[i]];\n  }\n  return this;\n}","map":{"version":3,"names":["Card","default","Color","_items","_classPrivateFieldLooseKey","_setColors","_shuffle","FactList","constructor","cards","Object","defineProperty","value","_shuffle2","_setColors2","writable","_classPrivateFieldLooseBase","clone","sortByDate","sort","c1","c2","date","sortedByDate","setupClues","length","isEmpty","allButLastItems","slice","last","at","pop","card","dropLast","dropLastCopy","prepend","item","unshift","prependCopy","addFact","push","resetMargins","resetItems","i","expand","addAnswer","answer","findById","id","find","c","findIndexById","findIndex","index","map","fn","appendClone","newCard","_FactList","items","forEach","color","colorAtIndex","SPECTRUM","randomInt","max","Math","floor","random","j"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/classes/FactList.tsx"],"sourcesContent":["import Card from \"./Card\";\nimport { default as Color } from \"./RgbColorMix\";\n\nexport default class FactList {\n  #items: Array<Card>;\n\n  constructor(cards: Array<Card> = []) {\n    this.#items = cards;\n  }\n\n  // PRIVATE METHODS\n  \n  // Set the colors of the cards in this list, in chronological order, to\n  // evenly spaced intervals along the spectrum.\n  #setColors(): FactList {\n    this.sortByDate();\n    let items = this.#items;\n\n    items.forEach((card, index) => {\n      items[index].color = Color.colorAtIndex(index, items.length, \n                                              Color.SPECTRUM);\n    });\n    return this;\n  } \n\n  // Shuffle the array, using the Fisher-Yates/Knuth shuffle\n  // (`https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle`)\n  #shuffle(): FactList {\n    \n    function randomInt(max: number): number {\n      return Math.floor(Math.random() * max);\n    } \n\n    let items = this.#items;\n\n    for (let i = items.length - 1; i > 0; --i) {\n      let j = randomInt(i);\n      [items[i], items[j]] = [items[j], items[i]];\n    }\n\n    return this;\n  }\n\n  // PUBLIC METHODS\n\n  clone(): FactList {\n    return new FactList([...this.#items]);\n  }\n\n  // Sort the array by the date field, ascending.\n  sortByDate(): FactList {\n    this.#items.sort((c1, c2) => { return c1.date - c2.date });\n    return this;\n  }\n\n  sortedByDate(): FactList {\n    return this.clone().sortByDate();\n  }\n  \n\n  setupClues() {\n    this.#setColors();\n    this.#shuffle();\n  }\n\n  get length(): number {\n    return this.#items.length;\n  }\n\n  isEmpty(): boolean {\n    return this.length === 0;\n  }\n\n  allButLastItems(): Array<Card> {\n    return this.#items.slice(0, -1);\n  }\n\n  last(): Card {\n    return this.#items.at(-1);\n  }\n\n  pop(): Card {\n    let card = this.#items.pop();\n    return card;\n  }\n\n  dropLast(): FactList {\n    this.pop();\n    return this;\n  }\n\n  dropLastCopy(): FactList {\n    return new FactList(this.#items.slice(0, -1));\n  }\n\n  prepend(item): FactList {\n    this.#items.unshift(item);\n    return this;\n  }\n  \n  prependCopy(item): FactList {\n    return new FactList([item, ...this.#items]);\n  }\n\n  // Add event to array and then resort by date.\n  addFact(card) {\n    this.#items.push(card);\n    this.sortByDate();\n  }\n\n  resetMargins(): FactList {\n    let resetItems = [];\n    for (let i of this.#items) {\n      let card = new Card({...i, expand: false});\n      resetItems.push(card);\n    }\n    return new FactList(resetItems);\n  }\n\n  addAnswer(answer): FactList {\n    return this.prependCopy(answer).sortedByDate().resetMargins();\n  }\n\n  findById(id: string): Card {\n    return this.#items.find(c => c.id === id);\n  }\n\n  findIndexById(id: string): Card {\n    return this.#items.findIndex(c => c.id === id);\n  }\n\n  at(index: number): Card {\n    return this.#items.at(index);\n  }\n\n  map(fn: (Card) => Card): FactList {\n    return this.#items.map(fn);\n  }\n\n  appendClone(newCard: Card): FactList {\n    return this.clone().addFact(newCard);\n  }\n\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}