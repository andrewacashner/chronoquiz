{"ast":null,"code":"import debug from \"../lib/debug\";\nimport Fact from \"./Fact\";\nimport Timeline from \"./Timeline\";\nexport default class User {\n  constructor({\n    username = \"\",\n    email = \"\",\n    password = \"\"\n  } = {}) {\n    this.username = void 0;\n    this.email = void 0;\n    this.password = void 0;\n    this.username = username;\n    this.email = email;\n    this.password = password;\n  }\n  get isEmpty() {\n    return this.username === \"\" && this.email === \"\" && this.password === \"\";\n  }\n  json() {\n    return JSON.stringify(this);\n  }\n  async request({\n    url,\n    method,\n    bodyObject,\n    token\n  }) {\n    let fullUrl = `${User.SERVER}/${url}`;\n    let authorization = token ? {\n      \"Authorization\": `Token ${token}`\n    } : null;\n    let msg = {\n      method: method,\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        ...authorization\n      }),\n      body: JSON.stringify(bodyObject)\n    };\n    let response = await fetch(fullUrl, msg);\n    return response;\n  }\n  async exists() {\n    let answer = false;\n    let response = await this.request({\n      url: \"check_user/\",\n      method: \"POST\",\n      bodyObject: this\n    });\n    if (response.ok) {\n      answer = true;\n    } else {\n      debug(\"User not found\");\n    }\n    return answer;\n  }\n  async register() {\n    let answer = false;\n    let response = await this.request({\n      url: \"register/\",\n      method: \"POST\",\n      bodyObject: this\n    });\n    if (response.ok) {\n      answer = true;\n    } else {\n      debug(\"Could not register user\");\n    }\n    return answer;\n  }\n  async authenticate() {\n    let token = null;\n    let response = await this.request({\n      url: \"login/\",\n      method: \"POST\",\n      bodyObject: this\n    });\n    if (response.ok) {\n      let json = await response.json();\n      token = json.token;\n      debug(`Authenticated user ${this.username}`);\n    } else {\n      debug(`Problem authenticating user ${this.username}: Response status ${response.status}, ${response.statusText}`);\n    }\n    return token;\n  }\n  async loadUserTimelineList(token = \"\") {\n    let list = null;\n    let response = await this.request({\n      url: \"timelines/\",\n      method: \"POST\",\n      bodyObject: this,\n      token: token\n    });\n    if (response.ok) {\n      let json = await response.json();\n      list = json;\n      debug(`Loaded list of ${json.length} timelines`);\n    } else {\n      debug(`Problem retrieving quiz list: Server responded ${response.status}, ${response.statusText}`);\n    }\n    return list;\n  }\n  async fetchTimeline(id, token) {\n    let newTimeline = null;\n    let response = await this.request({\n      url: `timeline-full/${id}/`,\n      method: \"GET\",\n      token: token\n    });\n    if (response.ok) {\n      let json = await response.json();\n      debug(json);\n      let creator = json.creator === \"\" ? this.username : json.creator;\n      newTimeline = new Timeline({\n        id: json.id,\n        title: json.title,\n        description: json.description,\n        keywords: Timeline.parseKeywords(json.keywords),\n        creator: creator,\n        facts: json.facts.map(f => Fact.newFromYear(f))\n      });\n    } else {\n      debug(`Problem loading timeline with id ${id}: Server status ${response.status}, ${response.statusText}`);\n    }\n    return newTimeline;\n  }\n}\nUser.SERVER = \"http://127.0.0.1:8000\";","map":{"version":3,"names":["debug","Fact","Timeline","User","constructor","username","email","password","isEmpty","json","JSON","stringify","request","url","method","bodyObject","token","fullUrl","SERVER","authorization","msg","headers","Headers","body","response","fetch","exists","answer","ok","register","authenticate","status","statusText","loadUserTimelineList","list","length","fetchTimeline","id","newTimeline","creator","title","description","keywords","parseKeywords","facts","map","f","newFromYear"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/classes/User.tsx"],"sourcesContent":["import debug from \"../lib/debug\";\nimport Fact from \"./Fact\";\nimport Timeline from \"./Timeline\";\n\ninterface UserInput {\n  username: string,\n  email: string,\n  password: string \n} \n\ninterface RequestInput {\n  url: string, \n  method: string, \n  bodyObject: object,\n  token: string \n}\n\nexport default class User {\n  username: string;\n  email: string;\n  password: string;\n\n  constructor(\n    { username = \"\",\n      email    = \"\",\n      password = \"\" }: UserInput = {}\n  ) {\n    this.username = username;\n    this.email = email;\n    this.password = password;\n  }\n\n  get isEmpty(): boolean {\n    return (this.username === \"\"\n            && this.email === \"\"\n            && this.password === \"\");\n  }\n\n  json(): string {\n    return JSON.stringify(this);\n  }\n\n  static SERVER = \"http://127.0.0.1:8000\";\n\n  async request({ url, method, bodyObject, token }: RequestInput): object {\n\n    let fullUrl = `${User.SERVER}/${url}`;\n\n    let authorization = token \n      ? { \"Authorization\": `Token ${token}` } \n      : null;\n\n    let msg = {\n      method: method,\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        ...authorization\n      }),\n      body: JSON.stringify(bodyObject)\n    }\n\n    let response = await fetch(fullUrl, msg);\n    return response;\n  }\n\n  async exists(): boolean {\n    let answer = false;\n    let response = await this.request({\n      url: \"check_user/\", \n      method: \"POST\", \n      bodyObject: this\n    });\n    if (response.ok) {\n      answer = true;\n    } else {\n      debug(\"User not found\");\n    }\n    return answer;\n  }\n\n  async register(): boolean {\n    let answer = false;\n    let response = await this.request({\n      url: \"register/\", \n      method: \"POST\", \n      bodyObject: this\n    });\n    if (response.ok) {\n      answer = true;\n    } else {\n      debug(\"Could not register user\");\n    }\n    return answer;\n  }\n\n  async authenticate(): string {\n    let token = null;\n    let response = await this.request({\n      url: \"login/\", \n      method: \"POST\", \n      bodyObject: this\n    });\n    if (response.ok) {\n      let json = await response.json();\n      token = json.token;\n      debug(`Authenticated user ${this.username}`);\n    } else {\n      debug(`Problem authenticating user ${this.username}: Response status ${response.status}, ${response.statusText}`);\n    }\n    return token;\n  }\n\n  async loadUserTimelineList(token: string = \"\"): array<string> {\n    let list = null;\n    let response = await this.request({\n      url: \"timelines/\", \n      method: \"POST\", \n      bodyObject: this, \n      token: token\n    });\n    if (response.ok) {\n      let json = await response.json();\n      list = json;\n      debug(`Loaded list of ${json.length} timelines`);\n    } else {\n      debug(`Problem retrieving quiz list: Server responded ${response.status}, ${response.statusText}`);\n    }\n    return list;\n  }\n\n  async fetchTimeline(id: number, token: string): Timeline {\n    let newTimeline = null;\n\n    let response = await this.request({\n      url: `timeline-full/${id}/`, \n      method: \"GET\",\n      token: token\n    });\n\n    if (response.ok) {\n      let json = await response.json();\n      debug(json);\n      let creator = (json.creator === \"\") ? this.username : json.creator;\n\n      newTimeline = new Timeline({\n        id:           json.id,\n        title:        json.title,\n        description:  json.description,\n        keywords:     Timeline.parseKeywords(json.keywords),\n        creator:      creator,\n        facts:        json.facts.map(f => Fact.newFromYear(f))\n      });\n    } else {\n      debug(`Problem loading timeline with id ${id}: Server status ${response.status}, ${response.statusText}`);\n    }\n\n    return newTimeline;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}