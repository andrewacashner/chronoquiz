{"ast":null,"code":"export default class User{constructor(){let{username=\"\",email=\"\",password=\"\"}=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this.username=void 0;this.email=void 0;this.password=void 0;this.username=username;this.email=email;this.password=password;}get isEmpty(){return this.username===\"\"&&this.email===\"\"&&this.password===\"\";}json(){return JSON.stringify(this);}async request(url,method,bodyObject){let token=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;let fullUrl=\"\".concat(User.SERVER,\"/\").concat(url);let authorization=token?{\"Authorization\":\"Token \".concat(token)}:null;let msg={method:\"POST\",headers:new Headers({\"Content-Type\":\"application/json\",\"Accept\":\"application/json\",...authorization}),body:JSON.stringify(bodyObject)};let response=await fetch(fullUrl,msg);return response;}async exists(){let answer=false;let response=await this.request(\"check_user/\",\"POST\",this);if(response.ok){answer=true;}else{console.debug(\"User not found\");}return answer;}async register(){let answer=false;let response=await this.request(\"register/\",\"POST\",this);if(response.ok){answer=true;}else{console.debug(\"Could not register user\");}return answer;}async authenticate(){let token=null;let response=await this.request(\"login/\",\"POST\",this);if(response.ok){let json=await response.json();token=json.token;console.debug(\"Authenticated user \".concat(this.username));}else{console.debug(\"Problem authenticating user \".concat(this.username,\": Response status \").concat(response.status,\", \").concat(response.statusText));}return token;}async loadUserTimelineList(){let token=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";let list=null;let response=await this.request(\"timelines/\",\"POST\",this,token);if(response.ok){let json=await response.json();list=json;console.debug(\"Loaded list of \".concat(json.length,\" timelines\"));}else{console.debug(\"Problem retrieving quiz list: Server responded \".concat(response.status,\", \").concat(response.statusText));}return list;}}User.SERVER=\"http://127.0.0.1:8000\";","map":{"version":3,"names":["User","constructor","username","email","password","arguments","length","undefined","isEmpty","json","JSON","stringify","request","url","method","bodyObject","token","fullUrl","concat","SERVER","authorization","msg","headers","Headers","body","response","fetch","exists","answer","ok","console","debug","register","authenticate","status","statusText","loadUserTimelineList","list"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/classes/User.tsx"],"sourcesContent":["interface UserInput {\n  username: string,\n  email: string,\n  password: string \n} \n\nexport default class User {\n  username: string;\n  email: string;\n  password: string;\n\n  constructor(\n    { username = \"\",\n      email    = \"\",\n      password = \"\" }: UserInput = {}\n  ) {\n    this.username = username;\n    this.email = email;\n    this.password = password;\n  }\n\n  get isEmpty(): boolean {\n    return (this.username === \"\"\n            && this.email === \"\"\n            && this.password === \"\");\n  }\n\n  json(): string {\n    return JSON.stringify(this);\n  }\n\n  static SERVER = \"http://127.0.0.1:8000\";\n\n  async request(\n    url: string, \n    method: string, \n    bodyObject: object,\n    token: string = null\n  ): object {\n\n    let fullUrl = `${User.SERVER}/${url}`;\n\n    let authorization = token \n      ? { \"Authorization\": `Token ${token}` } \n      : null;\n\n    let msg = {\n      method: \"POST\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        ...authorization\n      }),\n      body: JSON.stringify(bodyObject)\n    }\n\n    let response = await fetch(fullUrl, msg);\n    return response;\n  }\n\n  async exists(): boolean {\n    let answer = false;\n    let response = await this.request(\"check_user/\", \"POST\", this);\n    if (response.ok) {\n      answer = true;\n    } else {\n      console.debug(\"User not found\");\n    }\n    return answer;\n  }\n\n  async register(): boolean {\n    let answer = false;\n    let response = await this.request(\"register/\", \"POST\", this);\n    if (response.ok) {\n      answer = true;\n    } else {\n      console.debug(\"Could not register user\");\n    }\n    return answer;\n  }\n\n  async authenticate(): string {\n    let token = null;\n    let response = await this.request(\"login/\", \"POST\", this);\n    if (response.ok) {\n      let json = await response.json();\n      token = json.token;\n      console.debug(`Authenticated user ${this.username}`);\n    } else {\n      console.debug(`Problem authenticating user ${this.username}: Response status ${response.status}, ${response.statusText}`);\n    }\n    return token;\n  }\n\n  async loadUserTimelineList(token: string = \"\"): array<string> {\n    let list = null;\n    let response = await this.request(\"timelines/\", \"POST\", this, token);\n    if (response.ok) {\n      let json = await response.json();\n      list = json;\n      console.debug(`Loaded list of ${json.length} timelines`);\n    } else {\n      console.debug(`Problem retrieving quiz list: Server responded ${response.status}, ${response.statusText}`);\n    }\n    return list;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}