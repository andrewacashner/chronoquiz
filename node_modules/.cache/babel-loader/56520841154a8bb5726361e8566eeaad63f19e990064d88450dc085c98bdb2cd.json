{"ast":null,"code":"import debug from\"../lib/debug\";import BackendRequest from\"../classes/BackendRequest\";// TODO could you include the token as a member?\nexport default class User{constructor(){let{username=\"\",password=\"\"}=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this.username=void 0;this.password=void 0;this.username=username;this.password=password;}get isEmpty(){return this.username===\"\"&&this.password===\"\";}profile(){return{username:this.username,password:this.password};}json(){return JSON.stringify(this.profile());}async exists(){let answer=false;let request=new BackendRequest({url:\"check_user/\",method:\"POST\",bodyObject:this.profile()});let response=await request.fetch();if(response.ok){answer=true;}else{debug(\"User not found\");}return answer;}async register(){let answer=false;let request=new BackendRequest({url:\"register/\",method:\"POST\",bodyObject:this.profile()});let response=await request.fetch();if(response.ok){answer=true;}else{debug(\"Could not register user\");}return answer;}async authenticate(){let token=null;let request=new BackendRequest({url:\"login/\",method:\"POST\",bodyObject:this.profile()});let response=await request.fetch();if(response.ok){let json=await response.json();token=json.token;debug(\"Authenticated user \".concat(this.username));}else{debug(\"Problem authenticating user \".concat(this.username,\": Response status \").concat(response.status,\", \").concat(response.statusText));}return token;}}","map":{"version":3,"names":["debug","BackendRequest","User","constructor","username","password","arguments","length","undefined","isEmpty","profile","json","JSON","stringify","exists","answer","request","url","method","bodyObject","response","fetch","ok","register","authenticate","token","concat","status","statusText"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/classes/User.tsx"],"sourcesContent":["import debug from \"../lib/debug\";\nimport BackendRequest from \"../classes/BackendRequest\";\n\n// TODO could you include the token as a member?\ninterface UserInput {\n  username: string,\n  password: string,\n} \n\nexport default class User {\n  username: string;\n  password: string;\n\n  constructor({ username = \"\", password = \"\", }: UserInput = {}) {\n    this.username = username;\n    this.password = password;\n  }\n\n  get isEmpty(): boolean {\n    return (this.username === \"\" && this.password === \"\");\n  }\n\n  profile(): object {\n    return {\n      username: this.username,\n      password: this.password\n    };\n  }\n\n  json(): string {\n    return JSON.stringify(this.profile());\n  }\n\n  async exists(): boolean {\n    let answer = false;\n    let request = new BackendRequest({\n      url: \"check_user/\", \n      method: \"POST\", \n      bodyObject: this.profile()\n    });\n\n    let response = await request.fetch();\n\n    if (response.ok) {\n      answer = true;\n    } else {\n      debug(\"User not found\");\n    }\n    return answer;\n  }\n\n  async register(): boolean {\n    let answer = false;\n    let request = new BackendRequest({\n      url: \"register/\", \n      method: \"POST\", \n      bodyObject: this.profile()\n    });\n    let response = await request.fetch();\n\n    if (response.ok) {\n      answer = true;\n    } else {\n      debug(\"Could not register user\");\n    }\n    return answer;\n  }\n\n  async authenticate(): string {\n    let token = null;\n    let request = new BackendRequest({\n      url: \"login/\", \n      method: \"POST\", \n      bodyObject: this.profile()\n    });\n\n    let response = await request.fetch();\n\n    if (response.ok) {\n      let json = await response.json();\n      token = json.token;\n      debug(`Authenticated user ${this.username}`);\n    } else {\n      debug(`Problem authenticating user ${this.username}: Response status ${response.status}, ${response.statusText}`);\n    }\n    return token;\n  }\n\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,cAAc,CAChC,MAAO,CAAAC,cAAc,KAAM,2BAA2B,CAEtD;AAMA,cAAe,MAAM,CAAAC,IAAK,CAIxBC,WAAWA,CAAA,CAAoD,IAAnD,CAAEC,QAAQ,CAAG,EAAE,CAAEC,QAAQ,CAAG,EAAe,CAAC,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,MAH7DF,QAAQ,aACRC,QAAQ,QAGN,IAAI,CAACD,QAAQ,CAAGA,QAAQ,CACxB,IAAI,CAACC,QAAQ,CAAGA,QAAQ,CAC1B,CAEA,GAAI,CAAAI,OAAOA,CAAA,CAAY,CACrB,MAAQ,KAAI,CAACL,QAAQ,GAAK,EAAE,EAAI,IAAI,CAACC,QAAQ,GAAK,EAAE,CACtD,CAEAK,OAAOA,CAAA,CAAW,CAChB,MAAO,CACLN,QAAQ,CAAE,IAAI,CAACA,QAAQ,CACvBC,QAAQ,CAAE,IAAI,CAACA,QACjB,CAAC,CACH,CAEAM,IAAIA,CAAA,CAAW,CACb,MAAO,CAAAC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACH,OAAO,CAAC,CAAC,CAAC,CACvC,CAEA,KAAM,CAAAI,MAAMA,CAAA,CAAY,CACtB,GAAI,CAAAC,MAAM,CAAG,KAAK,CAClB,GAAI,CAAAC,OAAO,CAAG,GAAI,CAAAf,cAAc,CAAC,CAC/BgB,GAAG,CAAE,aAAa,CAClBC,MAAM,CAAE,MAAM,CACdC,UAAU,CAAE,IAAI,CAACT,OAAO,CAAC,CAC3B,CAAC,CAAC,CAEF,GAAI,CAAAU,QAAQ,CAAG,KAAM,CAAAJ,OAAO,CAACK,KAAK,CAAC,CAAC,CAEpC,GAAID,QAAQ,CAACE,EAAE,CAAE,CACfP,MAAM,CAAG,IAAI,CACf,CAAC,IAAM,CACLf,KAAK,CAAC,gBAAgB,CAAC,CACzB,CACA,MAAO,CAAAe,MAAM,CACf,CAEA,KAAM,CAAAQ,QAAQA,CAAA,CAAY,CACxB,GAAI,CAAAR,MAAM,CAAG,KAAK,CAClB,GAAI,CAAAC,OAAO,CAAG,GAAI,CAAAf,cAAc,CAAC,CAC/BgB,GAAG,CAAE,WAAW,CAChBC,MAAM,CAAE,MAAM,CACdC,UAAU,CAAE,IAAI,CAACT,OAAO,CAAC,CAC3B,CAAC,CAAC,CACF,GAAI,CAAAU,QAAQ,CAAG,KAAM,CAAAJ,OAAO,CAACK,KAAK,CAAC,CAAC,CAEpC,GAAID,QAAQ,CAACE,EAAE,CAAE,CACfP,MAAM,CAAG,IAAI,CACf,CAAC,IAAM,CACLf,KAAK,CAAC,yBAAyB,CAAC,CAClC,CACA,MAAO,CAAAe,MAAM,CACf,CAEA,KAAM,CAAAS,YAAYA,CAAA,CAAW,CAC3B,GAAI,CAAAC,KAAK,CAAG,IAAI,CAChB,GAAI,CAAAT,OAAO,CAAG,GAAI,CAAAf,cAAc,CAAC,CAC/BgB,GAAG,CAAE,QAAQ,CACbC,MAAM,CAAE,MAAM,CACdC,UAAU,CAAE,IAAI,CAACT,OAAO,CAAC,CAC3B,CAAC,CAAC,CAEF,GAAI,CAAAU,QAAQ,CAAG,KAAM,CAAAJ,OAAO,CAACK,KAAK,CAAC,CAAC,CAEpC,GAAID,QAAQ,CAACE,EAAE,CAAE,CACf,GAAI,CAAAX,IAAI,CAAG,KAAM,CAAAS,QAAQ,CAACT,IAAI,CAAC,CAAC,CAChCc,KAAK,CAAGd,IAAI,CAACc,KAAK,CAClBzB,KAAK,uBAAA0B,MAAA,CAAuB,IAAI,CAACtB,QAAQ,CAAE,CAAC,CAC9C,CAAC,IAAM,CACLJ,KAAK,gCAAA0B,MAAA,CAAgC,IAAI,CAACtB,QAAQ,uBAAAsB,MAAA,CAAqBN,QAAQ,CAACO,MAAM,OAAAD,MAAA,CAAKN,QAAQ,CAACQ,UAAU,CAAE,CAAC,CACnH,CACA,MAAO,CAAAH,KAAK,CACd,CAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}