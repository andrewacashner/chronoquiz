{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nvar _Card;\nvar _safe = /*#__PURE__*/_classPrivateFieldLooseKey(\"safe\");\nvar _markSafe = /*#__PURE__*/_classPrivateFieldLooseKey(\"markSafe\");\nexport default class Card {\n  // Each card gets the given info and a random unique identifier.\n  constructor({\n    isClue = true,\n    date,\n    info,\n    img,\n    color\n  }) {\n    Object.defineProperty(this, _markSafe, {\n      value: _markSafe2\n    });\n    this.isClue = void 0;\n    this.id = void 0;\n    this.date = void 0;\n    this.info = void 0;\n    this.img = void 0;\n    this.color = void 0;\n    Object.defineProperty(this, _safe, {\n      writable: true,\n      value: void 0\n    });\n    this.isClue = isClue;\n    this.id = crypto.randomUUID();\n    this.date = new Date();\n    this.date.setFullYear(date);\n    this.info = info;\n    this.img = img;\n    this.color = color;\n    _classPrivateFieldLooseBase(this, _safe)[_safe] = false; // Has this card been sanitized?\n  }\n  // PUBLIC METHODS\n\n  get isSafe() {\n    return _classPrivateFieldLooseBase(this, _safe)[_safe];\n  }\n\n  /** Creat a new card with sanitized input.\n   * - The date must be an integer string <= the current year (including\n   *   negative numbers).\n   * - The info is converted to plain text using textContent.\n   * - The image, if present, is downloaded and cached.\n   *\n   * The parameters are the same as for new Card().\n   *\n   * Returns: Card with validated content (with safe property set to true), or\n   * null if the input was invalid.\n   */\n  static async newSafeCard({\n    isClue,\n    date,\n    info,\n    img,\n    color\n  }) {\n    let card = null;\n    return card;\n  }\n\n  /**\n   * Return the year if positive or year BC if negative. (Deals with the year\n   * only.) \n   *\n   * Technically BC should be offset by one year but we told users to use\n   * negative numbers as years BC.\n   *\n   * Returns: Formatted string for year, with BC if the year was\n   * negative\n   */\n  dateToString() {\n    if (this.isClue) {\n      return \"Clue\";\n    } else {\n      let yearZero = new Date();\n      yearZero.setFullYear(0);\n      let displayYear = this.year;\n      if (this.date < yearZero) {\n        displayYear = `${-displayYear} bce`;\n      }\n      return displayYear;\n    }\n  }\n\n  // Return the date as YYYY year string.\n  get year() {\n    return this.date.getFullYear();\n  }\n  set year(YYYY) {\n    if (YYYY) {\n      this.date.setFullYear(YYYY);\n    }\n  }\n}\n_Card = Card;\nfunction _markSafe2() {\n  _classPrivateFieldLooseBase(this, _safe)[_safe] = true;\n  return this;\n}","map":{"version":3,"names":["Card","constructor","isClue","date","info","img","color","Object","defineProperty","_markSafe","value","_markSafe2","id","_safe","writable","crypto","randomUUID","Date","setFullYear","_classPrivateFieldLooseBase","isSafe","newSafeCard","card","dateToString","yearZero","displayYear","year","getFullYear","YYYY","_Card"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/classes/Card.tsx"],"sourcesContent":["interface CardInput  {\n  isClue: boolean;  // Is this a clue (true) or answer?\n  date: number;     // Four-digit year of event\n  info: string;     // Brief description of event\n  img: string;      // Full URL of image\n  color: string     // CSS color to be used in timeline\n}\n\nexport default class Card {\n  isClue: boolean;\n  id: string;\n  date: Date;\n  info: string;\n  img: string;\n  color: string;\n  #safe: boolean;\n  \n  // Each card gets the given info and a random unique identifier.\n  constructor({ isClue = true, date, info, img, color }: CardInput) {\n    this.isClue = isClue;\n    this.id = crypto.randomUUID();\n    this.date = new Date();\n    this.date.setFullYear(date);\n    this.info = info;\n    this.img = img;\n    this.color = color;\n    this.#safe = false; // Has this card been sanitized?\n  }\n\n  #markSafe(): Card {\n    this.#safe = true;\n    return this;\n  }\n\n  // PUBLIC METHODS\n  \n  get isSafe(): boolean {\n    return this.#safe;\n  }\n\n  /** Creat a new card with sanitized input.\n   * - The date must be an integer string <= the current year (including\n   *   negative numbers).\n   * - The info is converted to plain text using textContent.\n   * - The image, if present, is downloaded and cached.\n   *\n   * The parameters are the same as for new Card().\n   *\n   * Returns: Card with validated content (with safe property set to true), or\n   * null if the input was invalid.\n   */\n  static async newSafeCard({ isClue, date, info, img, color }: \n                           CardInput): Card | null {\n    let card = null;\n    return card;\n  }\n\n\n \n\n\n  /**\n   * Return the year if positive or year BC if negative. (Deals with the year\n   * only.) \n   *\n   * Technically BC should be offset by one year but we told users to use\n   * negative numbers as years BC.\n   *\n   * Returns: Formatted string for year, with BC if the year was\n   * negative\n   */\n  dateToString(): string { \n    if (this.isClue) {\n      return \"Clue\";\n    } else {\n      let yearZero = new Date();\n      yearZero.setFullYear(0);\n\n      let displayYear = this.year;\n      if (this.date < yearZero) {\n        displayYear = `${-displayYear} bce`; \n      } \n      return displayYear;\n    }\n  }\n  \n  // Return the date as YYYY year string.\n  get year(): string { return this.date.getFullYear(); }\n \n  set year(YYYY: string): void { \n    if (YYYY) {\n      this.date.setFullYear(YYYY); \n    } \n  }\n\n}\n"],"mappings":";;;;;AAQA,eAAe,MAAMA,IAAI,CAAC;EASxB;EACAC,WAAWA,CAAC;IAAEC,MAAM,GAAG,IAAI;IAAEC,IAAI;IAAEC,IAAI;IAAEC,GAAG;IAAEC;EAAiB,CAAC,EAAE;IAAAC,MAAA,CAAAC,cAAA,OAAAC,SAAA;MAAAC,KAAA,EAAAC;IAAA;IAAA,KATlET,MAAM;IAAA,KACNU,EAAE;IAAA,KACFT,IAAI;IAAA,KACJC,IAAI;IAAA,KACJC,GAAG;IAAA,KACHC,KAAK;IAAAC,MAAA,CAAAC,cAAA,OAAAK,KAAA;MAAAC,QAAA;MAAAJ,KAAA;IAAA;IAKH,IAAI,CAACR,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACU,EAAE,GAAGG,MAAM,CAACC,UAAU,CAAC,CAAC;IAC7B,IAAI,CAACb,IAAI,GAAG,IAAIc,IAAI,CAAC,CAAC;IACtB,IAAI,CAACd,IAAI,CAACe,WAAW,CAACf,IAAI,CAAC;IAC3B,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClBa,2BAAA,KAAI,EAAAN,KAAA,EAAAA,KAAA,IAAS,KAAK,CAAC,CAAC;EACtB;EAOA;;EAEA,IAAIO,MAAMA,CAAA,EAAY;IACpB,OAAAD,2BAAA,CAAO,IAAI,EAAAN,KAAA,EAAAA,KAAA;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,aAAaQ,WAAWA,CAAC;IAAEnB,MAAM;IAAEC,IAAI;IAAEC,IAAI;IAAEC,GAAG;IAAEC;EACnB,CAAC,EAAe;IAC/C,IAAIgB,IAAI,GAAG,IAAI;IACf,OAAOA,IAAI;EACb;;EAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,YAAYA,CAAA,EAAW;IACrB,IAAI,IAAI,CAACrB,MAAM,EAAE;MACf,OAAO,MAAM;IACf,CAAC,MAAM;MACL,IAAIsB,QAAQ,GAAG,IAAIP,IAAI,CAAC,CAAC;MACzBO,QAAQ,CAACN,WAAW,CAAC,CAAC,CAAC;MAEvB,IAAIO,WAAW,GAAG,IAAI,CAACC,IAAI;MAC3B,IAAI,IAAI,CAACvB,IAAI,GAAGqB,QAAQ,EAAE;QACxBC,WAAW,GAAI,GAAE,CAACA,WAAY,MAAK;MACrC;MACA,OAAOA,WAAW;IACpB;EACF;;EAEA;EACA,IAAIC,IAAIA,CAAA,EAAW;IAAE,OAAO,IAAI,CAACvB,IAAI,CAACwB,WAAW,CAAC,CAAC;EAAE;EAErD,IAAID,IAAIA,CAACE,IAAY,EAAQ;IAC3B,IAAIA,IAAI,EAAE;MACR,IAAI,CAACzB,IAAI,CAACe,WAAW,CAACU,IAAI,CAAC;IAC7B;EACF;AAEF;AAACC,KAAA,GAvFoB7B,IAAI;AAAA,SAAAW,WAAA,EAqBL;EAChBQ,2BAAA,KAAI,EAAAN,KAAA,EAAAA,KAAA,IAAS,IAAI;EACjB,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}