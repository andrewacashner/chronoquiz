{"ast":null,"code":"export default class User {\n  constructor({\n    username = \"\",\n    email = \"\",\n    password = \"\"\n  } = {}) {\n    this.username = void 0;\n    this.email = void 0;\n    this.password = void 0;\n    this.username = username;\n    this.email = email;\n    this.password = password;\n  }\n  get isEmpty() {\n    return this.username === \"\" && this.email === \"\" && this.password === \"\";\n  }\n  json() {\n    return JSON.stringify(this);\n  }\n  async request(url, method, bodyObject, token = null) {\n    let fullUrl = `${User.SERVER}/${url}`;\n    let authorization = token ? {\n      \"Authorization\": `Token ${token}`\n    } : null;\n    let msg = {\n      method: method,\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        ...authorization\n      }),\n      body: JSON.stringify(bodyObject)\n    };\n    let response = await fetch(fullUrl, msg);\n    return response;\n  }\n  async exists() {\n    let answer = false;\n    let response = await this.request({\n      url: \"check_user/\",\n      method: \"POST\",\n      bodyObject: this\n    });\n    if (response.ok) {\n      answer = true;\n    } else {\n      console.debug(\"User not found\");\n    }\n    return answer;\n  }\n  async register() {\n    let answer = false;\n    let response = await this.request({\n      url: \"register/\",\n      method: \"POST\",\n      bodyObject: this\n    });\n    if (response.ok) {\n      answer = true;\n    } else {\n      console.debug(\"Could not register user\");\n    }\n    return answer;\n  }\n  async authenticate() {\n    let token = null;\n    let response = await this.request({\n      url: \"login/\",\n      method: \"POST\",\n      bodyObject: this\n    });\n    if (response.ok) {\n      let json = await response.json();\n      token = json.token;\n      console.debug(`Authenticated user ${this.username}`);\n    } else {\n      console.debug(`Problem authenticating user ${this.username}: Response status ${response.status}, ${response.statusText}`);\n    }\n    return token;\n  }\n  async loadUserTimelineList(token = \"\") {\n    let list = null;\n    let response = await this.request(\"timelines/\", \"POST\", this, token);\n    if (response.ok) {\n      let json = await response.json();\n      list = json;\n      console.debug(`Loaded list of ${json.length} timelines`);\n    } else {\n      console.debug(`Problem retrieving quiz list: Server responded ${response.status}, ${response.statusText}`);\n    }\n    return list;\n  }\n  async fetchTimeline(id, token) {\n    await this.request({\n      url: `timeline-full/${id}`,\n      method: \"GET\",\n      token: token\n    });\n  }\n}\nUser.SERVER = \"http://127.0.0.1:8000\";","map":{"version":3,"names":["User","constructor","username","email","password","isEmpty","json","JSON","stringify","request","url","method","bodyObject","token","fullUrl","SERVER","authorization","msg","headers","Headers","body","response","fetch","exists","answer","ok","console","debug","register","authenticate","status","statusText","loadUserTimelineList","list","length","fetchTimeline","id"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/chronoquiz/src/classes/User.tsx"],"sourcesContent":["interface UserInput {\n  username: string,\n  email: string,\n  password: string \n} \n\nexport default class User {\n  username: string;\n  email: string;\n  password: string;\n\n  constructor(\n    { username = \"\",\n      email    = \"\",\n      password = \"\" }: UserInput = {}\n  ) {\n    this.username = username;\n    this.email = email;\n    this.password = password;\n  }\n\n  get isEmpty(): boolean {\n    return (this.username === \"\"\n            && this.email === \"\"\n            && this.password === \"\");\n  }\n\n  json(): string {\n    return JSON.stringify(this);\n  }\n\n  static SERVER = \"http://127.0.0.1:8000\";\n\n  async request(\n    url: string, \n    method: string, \n    bodyObject: object,\n    token: string = null\n  ): object {\n\n    let fullUrl = `${User.SERVER}/${url}`;\n\n    let authorization = token \n      ? { \"Authorization\": `Token ${token}` } \n      : null;\n\n    let msg = {\n      method: method,\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        ...authorization\n      }),\n      body: JSON.stringify(bodyObject)\n    }\n\n    let response = await fetch(fullUrl, msg);\n    return response;\n  }\n\n  async exists(): boolean {\n    let answer = false;\n    let response = await this.request({\n      url: \"check_user/\", \n      method: \"POST\", \n      bodyObject: this\n    });\n    if (response.ok) {\n      answer = true;\n    } else {\n      console.debug(\"User not found\");\n    }\n    return answer;\n  }\n\n  async register(): boolean {\n    let answer = false;\n    let response = await this.request({\n      url: \"register/\", \n      method: \"POST\", \n      bodyObject: this\n    });\n    if (response.ok) {\n      answer = true;\n    } else {\n      console.debug(\"Could not register user\");\n    }\n    return answer;\n  }\n\n  async authenticate(): string {\n    let token = null;\n    let response = await this.request({\n      url: \"login/\", \n      method: \"POST\", \n      bodyObject: this\n    });\n    if (response.ok) {\n      let json = await response.json();\n      token = json.token;\n      console.debug(`Authenticated user ${this.username}`);\n    } else {\n      console.debug(`Problem authenticating user ${this.username}: Response status ${response.status}, ${response.statusText}`);\n    }\n    return token;\n  }\n\n  async loadUserTimelineList(token: string = \"\"): array<string> {\n    let list = null;\n    let response = await this.request(\"timelines/\", \"POST\", this, token);\n    if (response.ok) {\n      let json = await response.json();\n      list = json;\n      console.debug(`Loaded list of ${json.length} timelines`);\n    } else {\n      console.debug(`Problem retrieving quiz list: Server responded ${response.status}, ${response.statusText}`);\n    }\n    return list;\n  }\n\n  async fetchTimeline(id: number, token: string): void {\n    await this.request({\n      url: `timeline-full/${id}`, \n      method: \"GET\",\n      token: token\n    });\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}